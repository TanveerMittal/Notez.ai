 Hello, welcome back. Everybody is nice to see you all again and welcome to another exciting class. And I just realized that put it on the wrong slide, has a starting point. So let me get it back to the right starting point. Right here. Here we go. So today we're gonna be talking about further logic minimization. Sorry, I'm a little confused here. I realized that the screen-sharing turned off for some reason. So at any rate, what we're gonna do today is we're going to review some of products and product of sums very quickly. And we're going to launch into K maps. And to prepare for the logic simplification algorithm village, I'll start covering either at the end of today or next week. The deadlines. Homework number one is due today at midnight on great scope. And homework number two will be posted shortly, and it will be due next Thursday. So I think that's it for logistics. Let me know if you have any questions. What I like to do is get started with our review of some of products and product of sums. And the very first thing I wanted to ask you is if I'm trying to represent Carrie using a canonical form, which form up, sorry, what I pick when I pick some of products or product of sums for carry. And if it's product of sums, why would I pick product of sums? Notice that carry function has a single one and has three zeros. Exactly. If you pick product of sums, you're gonna have possibly Whole bunch of gates. If you pick some of products, almost certainly you're going to have a smaller function. Now this is not always true. There are exceptions to this, but generally you want to go with the version that is more likely to give you a smaller representation. So in case of carry, we would probably start with sum of products because. It has only a single one. And now to remind you, when we represent max terms and minterms, we use decimal ID numbers that are calculated by looking at which variable is most vs. least significant bit. So in this case, a would be represented in this way. So to get the carry in sum of products form, I would have a min term of what? Which mentor represents sum of products form of the carry three exactly. Or I can write it as a b, which is this midterm right here. Ok. Now since we did some products for carry lights do product of sums for the sum. If I'm doing product of sums for the sum, am I going to do zeros or ones? Zeros? Correct? So I'll be looking at zeros and here I'm going to represent that use a max terms are minterms, max terms. So capital M, which max terms? 03. And I can write them out as a or B. Anded with a knot or being not. Ok. Any questions on this? Okay. So I would like to remind you that there is a simple way to map between this canonical forms. So if you have a midterm version of a function, you could get the max timber version very easily by looking at Mitch. Numbers are missing in the midterm version. For this, it is important to know how many variables you have. So if I have three variables, the possible numbers go from 0 to seven. If I have four variables, the possible numbers go 0 to 15. So four variables have 0 to four, then eight through 15 for max terms. For three variables, it's just 024. Okay? Same thing happens with max term to midterm. Again, it's important how many variables? Ok? You can also go from a function to its complement very easily. Notice that now it is exactly the min terms that are missing that represent the complement of the function. And same thing with the complement of a function using the max terms. Okay, so this provides you a very easy way to go from one representation to another. And this can be very useful when you're asked to do something on a test, for example. Now notice so far it's pretty clear that sum of products and product of sums canonical forms will not give you the minimum representation normally. In order to optimize representation, you either use Boolean algebra, such as what you're doing in your homework, or you'll learn a better way. And that is what we're gonna do next. You learn how to use K maps are known as Kernel maps. So came up to use the uniting theorem in which you try to use a graphical way to combine variables together to minimize them and to simplify your function. So in the example of this particular function f, you can see that function is a logic one into situations. It's a logic one. When a and B are both 0, and it's also a logic one. When a is one and B is a 0. So it seems that variable a, as it changes from 0 to one, it does not cause any change in the output. And this should give you a hint that you don't really need variable a in the representation that you can in fact minimize it out. And that is exactly what we see when we apply a little bit of Boolean algebra. We can also see this graphically, because if we have two variables, we can see that as a variable as you go from 1 on a cube to another, that the output of the function may not change value. And I will show you that in the very next slide. So if we have various numbers of input variables, this corresponds to different geometrical constructions. If I have just a single input variable that represents a single cube or one cube, or you can view it as a line. If I have two variables, the biggest cube I can have is a two cube, which is a square. If I have three variables, the biggest cube I can have is in fact the cube, which is no. Notice that in a cube I also have a bunch of lines along which only one variable changes bio. I also have a bunch of surfaces or squares in addition to the three-dimensional cube. And then finally, if I have four variables, so I end up with a four dimensional cube. And this is kind of an ugly drawing of it, which is part of the reason why we came up with kernel maps, which are simple two-dimensional tables that can help us represent up to four variable functions pretty easily. So I forgot to map a truth table onto a Boolean cube. What we do is we simply highlight points for which a function is a one. So in the example that I showed you earlier, we're about to fill in the points which are 0010, because that is when function f is a one. And here we immediately see that this creates a single line in our cube, in our square, which signifies that can in fact combine these two points into one line and get rid of variable a, because variable a changes while the output of the function does not change, the output of the function remains one. So you can see here that the function f depends only on variable B being 0 and variable b 0, function f is 0. Otherwise the variable b is one, function f is one. So this is why we say that function f is equal to B prime. Ok? So here. Oops, sorry, let me go back. Here. I can show you flatMap or kernel map version of a boolean cube. And you can see that it looks a lot like what we saw before. The key pieces that every variable is represented along either column or a row. So here a is in the columns, b is into rows. B represent only a single change from 0 to one along any axis. This allows us to place all of our midterms in the positions on the table. So notice that this position is represented as zeros Zara for a, B here we have 10, here we have 01, and here we have 11. These numbers correspond to the following decimal numbers right here. And these decimal numbers are just midterms that come out of our midterm table, right here. Okay? So if I have a function f here, I can immediately map it onto men terms straight into our kernel map right here. And I can also see visually that I can combine these two 1s together because they're right next to each other. And for these two 1s variable a, it does not matter because as it changes from 0 to one, function remains the same. But variable B does matter. Because for this particular function, variable B, when it is a 0 function isn't one. If B becomes logic, one function is a 0, and you can see that right here. Okay? So this is how I can combine these logic wants together. Notice that this combinations always happen in a power of two. So I can either have a single one, I can have two 1s, I can have 4816, I cannot have three. Okay? Okay, so let's do a few more examples. So here is another two variable K map. In this came up, I have a different function. So in this function, I have a single 0 and I have three ones. So what I want to It's on sum of products or product of sums representation product of sons because it's likely to give me smaller representation. Notice that I have only 10. So there is nothing to combine this with an impact in this 0. Variable a is a 0 and variable B is a 0. So if I want to represent function a b in product of sums form, I'm going to be using max terms are minterms, max terms. And in fact, if I do max terms, am I gonna use variable or its complement? So which max term does this represent? This band Madu max terms. Remember if variable is 0, then we represented as itself. This is very easy to confuse. So I would strongly advise you to, yeah, to write the cheat sheet for yourself. Okay. So this is what function would look like April, we're using product of sums. And you know the difference because we're focused on zeros and represent the zeros of a function. So product of sums, you do zeros. Okay? Now we're going to do the opposite. We're gonna do sum of products. So f of a, b, n sum of product form. So here we're going to do logic once. And let's start with one that's in a position to what can I combine this logic one way. Can I combine the logic one and position two when a 0, that's in position 0. So can I go this way? Now? That's bad news. Can I go vertically like this? So remember I can combine anything in which only one variable changes value. So in this case the answer is yes. I can combine it like this. In this case, we see that variable a is one. While variable b changes value from 0 to one, the function does not change values, so we don't need variable B, we only need variable a. Okay? So, and because this is sum of products, we use variable as itself when variable is a logic one. Ok? Now can I do this combination across a diagonal? So this is a big no, no diagonals. Because we have two variables changing value. So that's a big no, no. So you can now do horizontal row because logic, juan that's in position two cannot be combined with a 0 because the function output changes. So now on the other hand, if we take a logic one that's in position one, we can combine it across a row. So combination 13 works because function stays a logic one. And in fact, in this case, the output is just a variable b, because b remains a logic one across this row, whereas a changes value, but that change in value does not affect the output. So notice that in both cases we got exactly the same function, which is very nice. Any questions on this? Ok? This basically shows you exactly the same thing, but just that. So what I would like to do next is up. So what this be the situation, right. Doesn't matter that the SOP or BLOSUM? Yes. That's correct. In this case, it totally doesn't matter. You've got the exactly the same result. Okay. So I'm moving onto don't cares. Don't cares occur in situations in which either certain types of inputs done occur or certainly types. Even though he puts occur, we are not interested in those outputs. So for example, if I'm trying to represent decimal numbers using binary, we need for base to go from 0 to nine in decimal, which is represented as 1-0, 0-1. Anything beyond that is a don't care. Because I know I'm never going to have any digits that go beyond that. The other possibility is if I have outputs which will never happen. So if you think about the seven-segment display, we have only digit 0 through nine to put on the seven-segment display. So this means that some combinations of segments will simply not happen. In that case, we're going to use a don't care. Okay? So in a function we may have logic one output, logic 0, output, or you may have a don't care out, but don't care. Output means, and I just did not interested in that particular situation. So does it help us to half don't cares? And here is a first poll for you of today. So the question is, if I set a don't care to a logic one, mmm, I get the smaller representation. Then if I set, don't care to a logic 0, and you can use Boolean algebra for this without any problem. So think about it from Boolean algebra perspective. Do you get the smaller function? If don't care is allergic one, then if you treat Don't care as a logic, 0. Okay. Got five seconds, 43210, and somehow manage to go the wrong way. Sorry. Okay. So take a look at the results. And so the question was, do you get a smaller circuit implementation if you assume F11 is y instead of F, 11 is 0. So let's take a look at what, whether majority has chosen the correct answer. So let's look at this. First. Let's take a case. If this is a logic 0. So let's assume that I have a K map. Here is my K map, and here are my inputs a and B. And notice that I have logic one only when a is a one and B is a 0. So this is my logic one. And here I have all zeros. So this would be this case. The other cases right over here, in which case I have 011. We saw in the first case, I would want to combine for some product implementation. I would want to combine only logic once. So in that case, the representation I would get would be a B prime, right? If I do logic once. So if I do sum of products, what happens if I do product of sums? I would get these two sets. So the first one is a, and the second one is going to be, what is the second one is b prime. So it's the same thing. Okay? This is product of sums. Now let's look. If we treat the don't care as a one. If we treat it as a one, we can combine these two together. And now the function in sum of products or product of sums becomes just a. So, which is easier. Do we get a smaller circuit if we assume F1 of one is equal to a logic one. And the answer is yes. In this case, majority did not rule. Sorry to tell you. So we have an inverter which gives us two transistors, and an endgate, which gives us six transistors. Here, I just have a wire which is much smaller. Okay? Okay. So let's move on unless there's some questions. So in order to fully specify a function, we need to specify at one the function is a logic one. When it's a logic 0. And if there are any don't cares, notice that you don't need. All three of these is low. How many variables you have, you need only two out of these three sets. So if I have a two variable function, like I have here, whoops, sorry. Lloyd. This sometimes wants to, sometimes doesn't hear. Let me try this again there. Okay, say finding a two-variable function. And I specify the offset which is the midterms and a don't care set. In that case, I know exactly what my leftover max terms are and they're going to be whatever is missing. So in case of this particular function, I have specified the when the function is a, what I've specified when it's a don't care. So the only thing that's missing is when it's a 0 right here. I can also specify where all the max terms and all the midterms, because then I know they don't care, is only a one. And alternatively, I can specify the max terms. And the don't cares. And I know that leftover midterms is to sum, all of these are correct. Any questions on this gap? So that vizier, right, A4, the ball number two. So what I'm interested in then is which of these functions is fully specified? Okay, I got ten seconds. And again, this is fully anonymous. Paul got five seconds, 43210. And take a look at results. Majority is voting for option D, But we have various other choice is sprinkled throughout. So let's look at what actually is going on here. So let's first see the first function. In this first function, we have specified the minterms. Is this function fully specified? No, it's not. That what's missing here. You need at least one other term. So if I were to say that this function also has max term of Three, is it now fully specified? So if I were to say something like this, whoops. Is this okay? Exactly. So this is not okay when the number of inputs. So you need the fact that it has, say, only two inputs will get. So this is why answer a is not correct. How about the answer b? Now I have both max terms and don't cares. Is answer B correct? No. And why not? Number of inputs missing? So that's why it's not correct. Now look at version C. This is look at, great, I got MAX terms, I got don't cares. And I know that, that two variables, is there a problem here? Yes. This is a problem. If I have two variables that bees can only go with 012 or three for either max terms, min terms or don't cares, I cannot have a seven. So that's why C is not correct. Obviously is not correct. Which leaves us with D. D is correct. Now do I need all three here? I don't actually, but the function is still fully specified as long as all three compartments are correct. So it won't be fully specify the event if I had only two, right? This would be happy also. Gap. Okay, so let's move on to kernel maps with three variables. That's where things get a little more interesting. So here we use a numbering scheme that is based on gray code. We again make sure that only one variable changes value as we move along any column or any row. So notice that here we go from 01211 instead of 012, 1-0. Big, we don't do this because two variables would change value and that would make it difficult for us to visually combine variables into a larger function. Then notice that this changes how we label our min terms and max terms over here. So here we can combine things along rows and also along surfaces. This surface represents a literal a, why. Because if you look at all of the points on this surface right here, you can see that the only variable that does not change is variable a. And here variable a is a logic one. And this is why in product of sum, sorry, in sum of products or presentation, this surface would be equal to, so this function f of a, b, and c in sum of products would be equal to a. Okay? Now what happens if I have some other function? Let's say I have function w over here that happens to consist of these two logic ones. In this case, I can combine these two 1s into a single line. And notice that in this line, the first variable, which is variable a, does not change. And the second variable does not change. A is a 0 sign some sum of products representation because I'm here combining logic 1's, I would have a prime and in product of sums because B is a logic one, I would have just B. C changes value, but does that change, does not affect the output. So as a result, C will not be represented. How would this look in my colonel back while I would look at 011, that's where I would have a logic 1010, that's where I would have logic one. This allows me to combine these two 1s into a single line. And I can again visually see that this happens only when a is a 0 and B is a one. Makes it very easy for me to read out this output here. Okay? I can do the same thing for my other q, except now I'm looking at situations in which a is a one, it under all conditions. So that would be these four once. And I could combine all four of them into a single cube, and that would give me this other function, f. So this is w and that is f. Okay? Okay, you guys ready? Let's move to this next poll. And you get to tell me whether this three variable K map is correct. So take a careful look, n, Let me know whether this looks good. I'll give you 30 seconds, ten seconds, 54321 and 0. So here are the results. And man, this is a close call, super close. And those of you who got it wrong are gonna be surprised where the truck IS. Okay. So let me show you what the issue is. When we put that came up together. We said that any variable should, only one variable should change value as they move across columns or rows. So here C changes value across these two rows and that is fine. Now look at here, if I go from 00 to 01, only B changes values. So that's good. If I go from 00 across this edge only to 11, both variables change value. So that's bad news. And if I go here, again, both variables change value. So this is problematic. This cannot be. So what we actually needed to have here is 011110. This would have been happy. This here is super unhappy. So this is not correct. Okay? And this has to do with the fact that in K maps, you only can have one variable change value as you move across row, rows or columns. This is a condition for you to be able to minimize the logic function. Okay? So moving on, we have three variable K map here. Notice that this came up is correctly labeled and I have my way to put all the logic values in. Now notice, for example, if I look at this three here, 01 is the value of a and B. So that would be here. And then Si is a one. So that would be here. And here is where my logic one lice. And notice that this is the decimal representation of this point. So I would advise you with three variable key maps to always have on your cheat sheet nicely labeled version with these decimal values. So it's easy for you to put the minterms or max terms. And now looking at this came up, would you want to minimize sum of products or product of sums? Form. What is better? Correct? It would, should be product of sums because I have plus zeros. So let start wet product of service. Here's my function a, b, c. And this is going to be in product of sums format. And you'll start with a 0 that's in position two can be combined position do with position 0. Now, because position 0 is a one, you cannot combine zeros and ones. Can they combined position to that position six? Yes, exactly. Now, I cannot go to position 0, position four because both of those are one. Can I do something like this? Can I do this combination like that? So 267, can I combine 267 now because it has to be a power of two. So this doesn't work. Okay? So let's first represent this first combination, this first 00. This two. If I look at them, I see that my variable b is a logic one and variable c is a logic 0. Variable a changes value from 0 to one so we can disregard it. It's not going to affect the output. So this particular max term will have two components. It will have variable b. Is b represented as itself or as a complement. Notice that B is a logic one. So in product of sums should be be complemented or should it be itself. Add the product of sums. Baby should be complimented. This means since C is a 0, it should be presented as itself. Ok? So b is complemented and sees itself. Now we're going to move to a logic 0 that is in position seven. Can I combine this logic 0 when the logic 0 that's in position two. And the answer is now no diagonals. What I can do is I can combine 0667. And when I do 67, I am going to represent that when this particular term where both a and B are logic one. So here I'm going to write a or B. Ok? Does everybody okay with this? What I mean by power of two here is that I can combine only two zeros, four zeros, eight zeros. I cannot do six zeros, for example. And I definitely cannot do odd number of 0's because what I'm doing geometrically is I'm creating a line. I am creating. Oh yeah, you're right. It is a prime and B prime. Sorry. I'm creating a surface, or I'm creating a queue. Which were all of which require powers of two. Okay, so two to the 02 to the first, two to the second or two to the third. And the second question is, why don't we include C and the second term, we don't include C because C changes between 01 and this change does not affect the function. Output. Function stays a 0, C is not needed. Okay, so now for the fun of it, I would like to also look at some of product presentation. So let's do that as well. So this is going to be our sum of products version. So first I would like to start with a logic one that's in position three. What can I combine it with? I cannot combine it with zeros, so I cannot go with position two or position seven. What can I do? Correct? I can do position one. So let's look at that. If I combined it with position one, what will I get to know here? This is a sum of products. So here, variable season one. And I'm noticing that this particular case a is a 0. B changes value from. One, so I don't need it because as it changes value that the function doesn't change. So this would be a prime because a is a 0 and C because C is a one. Now this is a sum of product version, ok? So that covers these two 1s. I still have three ones left. So what do I do? Should I just do something like this to cover those three ones? Is that good or should I do something better? Like start with position 0. Can I combine position 0? I can combine it with position one, but I can go beyond that. I can actually also combined position 0145. And the reason why I can do this is along this edge, only one variable will change. So I go from 00 to 10, so only a changes value. And notice that here I have a situation in which B is a 0 in all cases. And a changes value and see changes value, but that change in value does not affect the output. So in this case, these four ones can be represented simply by writing B prime. Ok, so my sum of products implementation is a prime, c or b prime. Now the obvious question is, is this the same as product of sums implementation? And let's do a little bit of Boolean algebra to check whether that's the case. So I'm gonna do first b prime combination here. So I'll have a prime, b prime, or b prime ended with B prime will just give me b prime. And then I'm going to do C with B prime. So this will give me C B prime, and I'm going to do C with a prime. Ok? Notice that these three terms all have B prime in it. So now I can further simplify it. I can factor out b prime and I'll have a prime or logic one or C ended with a prime c. Now notice here, if I or anything vector logic one, what is my output? It's a logic one. So this means that I have b prime and that with the logic one, if I add anything with the logic one, I get that variable back. So here, after a little bit of Boolean algebra, I actually end up with exactly the same representation as wet sum of products. So always well. So as long as we go along any edge, that's a power of two, where a fine combining them, diagonals are not allowed. Because that actually does not give you a power of two combination where only one variable is changing. Okay? So I think that pretty much covers us. You can imagine left-hand side being of the came up being connected to the right-hand side. So I've missed wrote. Thank you for noticing. I actually messed up. And when I was rewriting the top line, I wrote, I should have written a prime c. That's this second term. So thank you, and they are the same if you write it correctly. Thanks for catching that. Okay. Moving on. Behalf don't cares. So in this case we have a K map that has a single don't care. And since we still have a lies zeros, then once I'm going to start out with combining zeros first. So let's start with these two zeros. These two zeros can be combined because they're right next to each other in a column. And this is again product of sums. If we combine these two zeros, we notice that they depend only on variables a and b. So in this case, it's gotta be a max term that's represented as a or B. It's a or B because both a and B are 0. Then again, this is product of sums, so we're looking at zeros. What can I combine this? A 0 and position three with? I can combine it with position one. That's correct. So if I combine it with the position one, I notice that variable b is not going to matter, changes value, but that change does not affect us. I'll see that variable a is a logic 0 and variable c is a logic one. So what should I write for my max term? It should be a or C prime, correct? Excellent. Well now we're Doug width product of sums, of course we're gonna do sum of products. So here, let's get started first with the one that's logic one that's in position two. So here's f of a, b, c, and this is a sum of products form. So here what do I want to combine? My logic? One that's imposition to width, position six. So I'm going to treat this don't care as if it were a logic one. And if I combine it, what I see here is that a is not going to matter. B is a logic one, and C is a logic 0. So which mentor does this correspond to? Midterm is going to be this is a minterm. Now this is not a max term. So b prime or C is a max term. Men term would be b, c prime? Correct. Okay. So don't care is treated as a wildcard. But if you decide that you're going to treat it as logic one, you need to then treat it as a logic one consistently for the rest of the problem. So now we're gonna look at position four. So a logic one and position for what can it be combined with? So I can combine it with 675 in a nice big square. This is the biggest size it can be. If I just took this piece, it will not give me the minimum representation. So this is an example where don't care really helps me a lot. So in this case, what is the mentor of the, this is represented by its just a, correct. And you can see that by seeing that a is a logic one, b changes value and see changes values. So neither B nor C matter. Okay? Now we can double check whether these two representations are the same. And that's pretty easy to check by simply cross multiplying. So here we're gonna have a or a C prime, or a B, or B C prime. And again, all of this is going to combine them to a or B, C prime. So again, these two are the same. Okay? Okay. You guys are ready to launch into four variable K map. So 4-variable came up when you draw it geometrically is a huge pain to draw. Now the nice thing is you can combine two points to create a line. So this leaves you with three variables that are going to be represented using in the midterm. If you combine the surface, you're gonna have two variables. If you combine a queue, you're going to have one variable left. Now also notice that here we can use our decimal numbers to nicely label key mapped to kind of simplify filling it it. Now if we look at this and we assume that we have no don't cares. So DC set is empty. Water. Our max terms, Mitch, Max terms to the right in the year. It should be one because one is missing here. 491213. Excellent. So all I do is I take this information and I put zeros in the correct places. And the one, okay. And, and nine. Ok. The rest are logic. Once. Okay, now let's see how we represent f using, let's do sum of products form first. So in sum of products form, I'm going to start with these, this particular logic one. So this is a logic one that's in position three. What can I combine it with? Bottom two rows, correct? And look how wonderful this IS. Now notice another thing in our K map. In the K map I have choline where that particular variable is a logic one. This makes it easier for me to realize that C is a logic one here. And that neither a nor B, nor the matter here. Here, I would just represent these eight ones using a logic. Let's see. Ok. And you can see that also if I were to label these just using our, sorry, this was wrong, fix it using our binary labels. So here you see that a is a logic one. And here you can see that C is a logic one over here. So here is a. And same thing happens for DMB. Okay? Now notice that we have a logic one here in the middle, in position five. Is there something that we can combine that with? So what do we do with a logic one that's in position five over here? What do I combine it with? We can combine that to wet seven. I cannot combine it with six because that's not a power of two. So if I combine these two, I see that a over here is a logic 0, so it's a prime. B is a logic one, so it's just b. And I see that because B is a thick line. D is a logic one. And I see that C doesn't matter because it changes value from 0 to one. Okay? So that's it. And I still have this logic one, I have these poor than that is that these four M, four corners. Can I combine these four corners together? And the answer is yes, I can do this. I can do for nice corners. Because this is going to allow me to further minimize my function along these four corners, this hole came up kind of folds around both columns and around arose. So this is why this combination works. So in this case, variable a is minimized because a is bought one on this i, 0 on this side, so it does not affect the output. Variable C is also not needed because it is 0 in the top row, one in the bottom row. So the only variables we have left our B, which is a 0 in this column and this column, and d which is also 0 in both of the columns. So this is why this particular four columns are going to be, sorry, four corners are going to be represented as B prime, the prime. Okay? Now, since we've done the sum of products, let's do product of sums. So for product of sums, we're looking add zeros. So let start with a 0 that's in position nine. What can I combine this 0 width? So nine can combine with 13 over here. Can we combine it with something else? Yes, we can combine it with one as well. No, not that one position combined with anything else. So we like to pick this one then, because that will cover that particular one. So let's represent that in here. This is going to be our a, B, whoops, sorry. C and d. This is in our product of sums version. So let's do this term. And for this term, we see that a is not going to affect us. So this is what uncombined with nine term is not going to affect us because it changes from 0 to one. B is a 0, so B is going to be represented visit, so C is a 0, so it's represented as its up again, this is product of sums and D is a one, so D is going to be a prime. Ok? So we're done with this. Now let's move on to 0. That's imposition for what can we combine it with? We can combine it with position 12. We cannot combine it with anything else. So let's write that. So for combined with 12, we see that a is not going to matter because a changes. But B is a logic one. So it's going to be represented as b prime. C is a logic 0, so it's going to be represented the C and D is a logic 0 up here, and it's going to be represented as D. So that covers these two zeros. And now that I have 13 left. And the interesting thing about 13, Yes, I have an option. I can combine it with 12. So I can do 1213 or I can do 913. Either way, the function will be covered. So I can do one of these, 21213 or 913. And in both cases I have correct result. Okay, so both of those plus these two resulting correct function. So these two we call essential. Because without them function will not have correct output versus one of these two is redundant. So 1213 is represented. How? So 0.1213 combination. We have a that changes, so that doesn't matter. Bees or logic one. So it's going to be B prime. C is a 0 and D is a 0. Whoops. The, I know I did 412, sorry. That's what I'm thinking. What am I doing this wrong? Okay, so 123013 is this vertical thing column. So here in column a and b are both one. So a is a prime, or b is a prime. And then in this column, C is a 0. Ok, so that's one. So if I have a function f that is in product of sums, and it uses the 1213 version. It's going to be represented as b or c or d prime. Anded with B prime or C or D. Anded with 1213, which is a prime or b prime or C. So that's one correct answer. Now, let's do the other correct answer and I'm going to put that one here. So this is one possibility. The other possibility and both of these are correct, is going to include the term that is a combines 913. So 913 is this row right here, over here. So, or this row right here might be easier for you to see. So this is 1213, here is 913. This is this one and this is going to be down here. So if we combine these two, we see that the a is a logic one. B changes values, so we don't need it. C is a logic 0 and logic one. So that's this term. And then the other two terms, these two remain the same. So this is b or c or d prime. Anded with B prime or C or D. So these two, both are correct. Any questions on this? Okay, I'm gonna move on. So here I have an example of a 2-by-2 multiplier. This is a function that has two to make the inputs. So input a, input B. And notice that a2 is considered most significant bit. So it does matter whether you have 01, in which case that's a decimal one, or you have 10, in which case it's a decimal two. And same is the case when B. So it doesn't matter if I have 01, in which case it is a decimal one or 10, in which case it's a decimal two. And if I multiply these two together. So for example, if I look at this row and I multiply two times one, I'm going to get the output of a two, right? And this is represented in binary as 00 1-0. If I multiply two by two, I'm gonna get the output though about this symbol for, and it's represented as 0101. Why do I have four outputs? So I have four bit input and four bit output rate. I have 4-bit output because my biggest number is three times three, which is decimal nine, and that is represented with four digits. Okay? So what I did next is I took my hour four bits of input and I created four K maps, one for each of these outputs. So the pH will represent the two to the third power before two to the second to the first two to the 0th power for each of the digits that we need to represent in our final output after multiplication. Ok? So here is what our two-by-two multiplayer looks like. And let's start with B8. Do you want to minimize zeros or ones and B8? Correct, you definitely want to do ones because there is only one of those. And since there is only one, and for this one, a2 is equal to one, A1 is equal to one, b1 is equal to one, and b two is equal to one. And I know that by knowing that this is highlighted here. And you can also know it by simply looking at what the actual values would be if I were to fill them out. So that means that my output is a2, a1, b2, b1. Then that's it. Super easy. Okay, let's move on to before. And only three ones. I'm gonna focus on once again. So here I can combine these two together. And I can combine these two together. So the first row is going to result in what? I will have a2, which is u1, A1, which is a 0. I don't use B two because B two changes from one to 0, but I do use b2 because that is logic one for both of those boundless, Okay? And then my next term is the horizontal one. Here, a2 is a logic. 11 is not going to be represented because it changes from one to 0. B, two is a logic 0, sorry, b1 is a logic 0, so it's going to be complimented. And B2 is a logic one. So it's going to remain the same. I should have had a one compliment that I believe here because A1 was a Zara or realloc m. This look at the next one is going to be K Map for p2. And this K map is a little bit more complicated. But notice actually, you know what? I'm going to pause on this because I just realized I have a perfect target on P1. I have for that I can circle together. And these four will be represented not with a2, because A2 changes value from one to 0. There are also not going to be represented with B two because B two also changes value. They will be represented by the B1 and B1. And in fact, what is this midterm? It's A1, B1, exactly. Perfect. Okay, now why I paused and P2, Well, we have then all minterms, all sum of products. I would like to try out product of sums. So let's start with a 0 that's right in the middle here. Can they combine this 0 with anything? Correct, we cannot combine it with anything because there is nothing, no zeros that are horizontal or vertical from it. So this ends up being just a single term. And what does this term correspond to? We know that this is product of sums. And we know that all variables are equal to one. In here. This corresponds to exactly same location is this location here? So what should I write in the year? Am I gonna rights a2 complemented or a2 a by itself? A2 here is a logic one. This is product of sums. They are all going to be complimented the exactly because this is product of sums representations. So when a variable is a logic one, it gets complemented then the product of sums or presentation. Okay? So that means that we're done with this particular 0. I would like to look at this 0 next. What can I combine it with? Can I combine it with the 0 that's over here on the left? Yes, exactly. I can do four corners. This is super important to always remember that four corners are perfectly good representation. Now let's look at what variables I have here. In these four corners. I do not have a2 because A2 changes value over here. A1 does not change value. A1 is a logic 0. So in this case a one would be represented as itself. Yvonne is also 0, so it will be represented by itself as well. And you can see that here that in both throws, B1 is a 0. And finally, we have B2, but B2 changes value. So we do not in fact need b2. So this is how we represent the four corners, A1 or b1. Okay? So we're done with this era, we're done with this 0. And I'm noticing that I have this 0 right in here that needs to be represented. So what can I do with that 0? What can I combine it with? Square exactly, I can do this. So let's do our little square over here. This square, because we have combine four of them, we expect two variables to be left. So in this case, a2 is 0, which means that we just keep a2 as is. And we see that b two is a 0. So we would keep B2 as s. So that would be this term. So that means that we're done with this one. And we have only two zeros left. So let's start with the one in the top row. And to do this should, what should they combine? We can do a whole bro, that's correct. So if I do a whole row, what will I get? I don't use a2, I don't USA one. I do have B1 which is a 0, and I do have B2, which is also 0. Okay? And now I'm down to my last 0. What do I do with this last 0? For the last 0, I do a hold first column. Correct. So this first column is going to be represented wet a2, which is a 0, or a one which is also 0. And we're not gonna use this V1 or V2. Ok? So that's it. This would represent our P2 implementation. Is everybody okay with this? Okay, see no question. So I'm going to continue on. So let's look at don't cares in that key map with four variables. And what I would like to do is two versions of this. To compare them. Let's assume first that we're going to not use the don't cares to our advantage. So here in this case work about half situation in which we're RED doubt don't cares. I don't know why my pen is not working. So we're without don't cares, we're gonna treat them as if they are 0. So in this case, we would start with this one and we can combine it with four, with three other ones. Who get which term. So this term would be equal to in sum of products form. It will be equal to a prime because a is a 0 here, or D, because D is a one, B and C do not matter. And I see that I here have logic one. This logic one can be combined with the logic one on the left to give me a term that has b prime because B is a 0, it has c prime because C is a 0 and it has the gap. So this is if I treat my don't cares as if they were logic zeros. And I don't use them to my advantage. Okay, now let's see the situation wet don't cares. So here again, have the same four combination. Nothing changes. But now if I treat this don't care is a logic one. I can actually create the whole row. And what is this rho equal to? So what is this rho equal to? K would be equal to C prime D, correct? Notice that the other don't care's we treat it as zeros and that's perfectly fine. We just need to be consistent. So in this case, it's very clear that it was super useful for us to have one of the don't cares be a logic one, the other two to be logic 0. So when we do these combinations, we always want the biggest possible combination we can find. Because the biggest possible combination will have the smallest number of variables, which will give us the smallest number size of the gate. And we always like smaller gates. Okay? Okay, so moving on. Let's do another example. In this example we have some don't cares. And let's see, do we want to do, but do we have more zeros or more ones? Do we want to do some or products or product of sums? I think this one is more of a product of sums. From what I can see. Since I have less zeros then once. So let's start with the top 0. What can be combined as 0 width. Can we do to, or can we do more? We can make a square, correct? So this square will be equal to what? So a doesn't matter because it changes value. B is a one, so it's going to be a B prime. D doesn't matter, but C is a 0. So this is b prime or C. So that took care of this. So how about this next logic, 0, what can they combine it with? We can do a whole line, which is great. So this would be a doesn't matter, B doesn't matter. C is, and D is a one. So here we are. So we're done with those. Now I have these two 0's. Can I do anything other than combine them together? Is this the best that I can do? I think this is the best because I have a logic one here and over here, so I can't do anything else. So now I would expect three terms. In this case, a is equal to one, so a would be primed, b is equal to 0. So we would just have b, a, c is equal to one, say would be primed and D changes value so we can get rid of it. Excellent. So let's do one more example this time with don't cares. So in this case I have a situation in which I have again four input function and the four output function. And what I'm doing is I'm taking a binary number and I'm adding one to it and then I'm implementing it using binary coded decimal. In BCD. I can only have digits from 0 to nine. So why? When I take, for example 0 and I add one to it, I'm going to get a decimal one. And here I get 23 and so on, up to nine. And then when I have nine and I add one to it, I'm going to get a decimal 0 and I'll have overflow. The rest of the combinations are not, are going to be don't care, because the only digits I want to output there, 0 through nine over here. Okay? So if I put this together into K maps, I'm going to get key maps that looked like this over here and you can double-check for homework whether this matches. So here I would like to start combining my values. And because I have a single logic one, I want to combine it with the don't care, that's right next to it. So 408, my output would not have input eight. It would have input for an input for is a logic one. So it would not be complimented. A both have inputs two, which is also a logic one, and it would have input one, which is also a logic one. Okay, so this is my 08. Now might see our output 04. Here. I can create a square up here. I can create another square like this. So let's start with this square first. In this case, I hate this minimized, but I do have I4. And what else do I have? I have I two now I don't have I too, but I have i1, which is a prime. So that covers the square. The second square is going to be over here. In this square. I don't know if I, I do have I for, which is a logic one. I have I2, which is prime, then I don't have i1. So this covers this over here. And now I have this logic one left. I can connect this logic one with the don't care. So for that, I am not going to have, I ate, but they will have I4 reaches a logic 0. I will have also i2 and i1, both of which are logic one. Are we okay with this? For a Do I need to account for the top rate one? Oh, I do. I totally forgot it. Thank you. So this one will be a for some actually thinks we're noticing this. And if we have four of them, we would have i eight. We both have not I for not the I2, but we would have i1 prime. Thank you so much for catching that and appreciate that. Ok, and I think I did. Okay, I will know for, let's see, O2. In L2, I only these two sets of tools. There is nothing else that I can do. So this is really not that exciting. So this means I have, I ate prime, I, I two prime and I1 ord with I ate prime, I2 and I1 prime. Okay, so that's it. And the last one is 01. In this case I have something super cool. Look at this big humungous combination of eight. So looking at this, what do I have here? I don't have I represent that. I don't have I fall represent that. Don't have i to represent that I do. I've i1. So this is just I1 prime. It's super exciting. Got, I think this is pretty much it for today. Do you guys have any other questions on this or on anything else? Okay. We don't have any other questions on this. I'm gonna stop sharing. And next time we're going to continue on. Where, how do we actually design a computer algorithm to do all this? Heart's not for us. Thank you all, I really appreciate your time and have a great day. Bye.