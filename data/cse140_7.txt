 Hello everybody. Hope you're all doing great. Today. Today is an exciting day. We're gonna be going through a bunch of sample problems to help you guys prepare for the midterm. I'm getting set up. What I'm going to start out with is giving you a little bit of an overview of the types of problems you might expect to see on the exam. And also giving you some idea of what was covered in class so far. So what we've covered as everything from reviewing number representations and Boolean algebra to going over how seamless transistors are designed, how to build cmos logic gates way. I expect you to know how to build not NOR and NAND gates using cmos. And I expect you to just know that the XOR gate is built out of eight transistors. You learn how to make called Nand only or nor only circuits. We learned why NAND and NOR are universal gates. And then that led us into discussing how to do some of products and product of sums, where in some products we combine ones. In product of sums, we combine logic zeros. We talked about an algorithm for logic minimization, where you look through your K map. For every, for example, logic one, you would find all possible prime applicants, both horizontally and vertically. And once you've gone through and done prime implicates for all once, then you would down select only once that are essential. And those essential ones are those that are the only ones that cover that particular logic. One, you can do exactly the same thing with zeros if you're doing product of sums. So there's no deference. You will, again find all prime implicates that covers arrows and find the central ones that aren't the only ones that cover that particular Zara. We talked a little bit about multilevel logic. For multilevel logic, we discussed the fact that sometimes you really don't want to implement really big gates with like 78 and bots instead, what you should do is split it up into multiple gates, each having two to three inputs because you'll end up with much faster implementation. And the other thing we discussed is that there are situations in which one gate may need its output as an input to multiple other gates. Because that, that Gates logical function ends up being used by more than one gate. So in that case, you would also end up with multilevel logic. Then we talked about various types of components. We talked about multiplexers and do the multiplexers. We discussed the fact that mux and demux are built out of past gates. Multiplexer takes bunch of inputs and selects which one of those inputs will be connected to the output. D max does exactly the opposite. We talked about the encoder and decoder. Decoder is used very frequently to address memory. In decoders, selector inputs will select which one of the outputs will have a logic one on it. And all the rest of the outputs will have a logic 0 encoder does exact opposite. In general, in exams, I would for sure, no, my decoder and my max d max shows a fairly rarely encoder, never shows up. We talked about adders to discuss two different types of single bit adders, half adder, which only has two bit inputs. So a and B would be input, for example, and have a full adder which has three inputs, a, B, and Carrie-Anne wed FullAdder. You can build multi-bit adders. So I can go from having just a single one bit input for each variable to having 32-bit variables added together. And I do that by connecting carry out of one stage to carry him off the other stage. And when you do that, you end up with a ripple carry out. They're, the problem with ripple carry adder is they'd takes you quite a long time to calculate that carry because it ripples through a whole sequence of gates. So we discussed how to improve them that we talked about carry look ahead adder, which allows us to actually precompute the carry by using only the inputs that are available right at time 0, which of the inputs a and B? And input to the lowest stage carry. So Carrick 0 and put the problem with carry. Look ahead is that the further you get down the bits, you end up with much bigger size gates. At some point it doesn't make sense to actually use carry. Look ahead. We talked about comparator shifters and ALU's. I don't expect to put anything related to competitors or ALUs on this exam. So what we planned to do today, we're going to review. I have bunch of problems, some of which I solved for the previous session. And so I'm not going to solve them again for this one because you guys can just watch the video from previous session. Hopefully some of the other problems will solve in this particular session. And you will also have, and I have posted sample exam. We'll go through that sample exam and discuss what you can expect and not expect on our exam that's going to happen on Thursday. So just to give you a quick overview of the exam is on Thursday, it is graded out of it will be totaled 110 points, but it's graded if it's, if it's out of 100 points, so you get them points bonus. It has only four problems. You'll notice that sample exam had six problems, but that's because sample exam was 80 minutes long. You will get questions on canvas and you'll turn it into great scope. And we'll actually do a demo in a second of how that's gonna work. Between nine AM to 10:00 PM Pacific. At Piazza, we will be answering to private posts only. The exam itself, as I said, will be 60 minutes long, but you can take it at any point in time in 24 hour period from nine AM on Thursday to nine AM on Friday. You cannot take breaks during the 60 minutes. There'll be a timer that's going to start them Canvas The moment you access the exam. And you will have five minutes grace period to turn it in. Integrate scope. If you're more than five minutes late. So between five to ten minutes late, you're gonna get 25% blower. Great. If you're ten to 15 minutes late, you'll get 50% lower grade. And if you're more than 15 minutes late, you will get 0 points on this midterm. So please do be fast that uploading your exam. Okay, what I would like to do next is walk you very quickly through a sample exam. So let me share that screen right here. Alright. So looking at this exam, you can see, first of all, obviously this was done in person, so that's why it's printed. The exam also had ten extra bonus points, same as your exam. The differences is that this was 80 minutes. So this exam had six problems. Notice that not all problems have the same number of points and this is the case in your exam as well. Your guys, this exam is open book, open notes, open calculator. Since you have open internet anyway, this exam was closed book, closed notes, and they had only one cheat sheet. So you got a good deal going here. You are not allowed to talk to anyone other than the post private Piazza post during that time that we can answer them. And you are expected to write exactly how you got the answer. Because just showing the correct answer, he's not gonna give you full credit. Without the details of how you got there. You're going to get very little to almost no credit. So do show us what you did in order to get your results. Okay, so let me go through the problems. The first problem is a word problem, and it asks you to simplify a Boolean algebra representation on it. This is an example where you can use theorems and axioms, but you did not have to write the names of them. You do have to show step-by-step how you got there though. You can't just show the beginning and the end because we both believe that you've actually done it. Then in the second problem, you have a gate CRT based circuit. And it asked you to draw the implementation using minimum number of NAND gates and inverters. So what I do with this is I will first simplify it. Maybe using a K map, we're using Boolean algebra and then I would go and implement it using NAND gates and inverters. There was a clarification question. Uh, your exam will have four problems, not six problems. Then it asks you how many cmos transistors does this circuit have? That should be pretty easy because man has four transistors, inverter has two. So you just need to add up how many anyons and inverters and figure out based on that how many transistors. Now I could have also asked you to implement the circuit using minimum number of transistors. If I did that, what I would have asked this effectively minimum number of NAND NOR is an inverse. Ok? Problem three is a word problem that ask you to fill out the K map and then do prime implicates essential primes and find the minimum POS implementation. This type of problem pretty much always appears on exam, some version of this. So make sure you feel very comfortable with primes, essential primes, and neither PR, it's or a sub b. And pay attention to whether I ask about the implicates or employee cuts. Implicates, looks for zeros, implicates looks for ones. Next problem is a max problem. It asks you to figure out what should be connected given that the control signals are C and D. Notice that in these mux problems, always the leftmost connection is the most significant bit. Feel free to write what you assume as well on the exam. We almost always tell you as well what is the most significant bit. I have a quick question about that. Go ahead. So if, so c, if c Then as the most significant bit, what did then always have Yp but one with, associated with it and the 0 would be associated with D, Or is that for the decoder? I already said that the top also has the most signifigant, but on one of them decoders 0 was on top and one was on the bottom. So when I say that c is most significant, that means that wherever the leading number is in these binary combinations that corresponds to c. So if I say 10, then c is one and the 001, then c is 0 and D is one. Okay? When, when the monks comes up all pointed out, thank you. I am about this type of a problem. Again, will appears with pretty high frequency. And almost every exam had some form of a mux decoder AD or some version of combination of those. And the part C is a cascading mocks Again, this is fairly frequently appearing. Notice that this one has different controls. Here. I control with D here, with d prime in here, which seems so be careful when you analyze this. And again, I'm not gonna, I'm not gonna analyze this in class because I wanted to leave this for you to practise at all. Since we did post solution for this exam. And I suggest you practice these problems before discussion session tomorrow so that you can ask any clarification questions during the discussion section. So this was the one I had a question on. So here you have 01 coin top-down and any, and does that mean when we're reading these, that the most significant bits, the one on top or is. Again, remember that the control here is the signal D 01 means is if D is a 0, x 0 is connected to output. If D is a one, x one is connected to output. Down here, it says if d prime is 0, x2 is connected to out. If d prime is a one, X3 is connected to output. Thank you. So moving on, here's a beautiful ALU, problem. For those of you who panicked when you saw this, there will be no ALU problem on an exam. This exam, there will be a new problem on next exam. So I will not solve this if I were you right now would keep it for the next exam was Practice. Problem Number six, excellent mystery gate problem that has a decoder and has a max. In this decoder, the control on top is always the most significant bit. So either left or top are always most significant bits. So in this case, the mystery gate output, let's call it say W. W would be the first bit in the two bit combinations that we see here. So for the input 10 C is a 0, WAS a one. Ok? And this kind of a problem very frequently appears on exam. I think I would say 90% of my exams have had the mystery gate on it. Okay. And this kind of exam, what I normally do when I have mystery gate this I just labeled the output, the mystery gate as some other variable like w. And I solved the rest of the problem using it. And then I asked myself What is W equal to in terms of a and B. Okay, so that pretty much covers the sample exam. Any questions regarding sample exam? Ok. I see no questions. And I think Jason is on JSON. Are you ready to do the Demoticus? Excellent. So Jason is going to show you next demo of how you get to get the exam and how you've submitted her yes. Put on canvas. So we're going to be asking the question through Canvas or we'll be submitting our work through. Great, cool. Let me give you didn't click. So yeah, if you click on the quizzes tab on the left, there will be a prototype exam and this is also the same place that exams will show up in. So you click on the exam. You'll see the instructions for the exam on. The timer hasn't started yet because before the exam and Harryette tempted as tested and but yeah, so just treat the exam then. That's when you get in the exam. You'll see the questions pop up. And the idea here is each question is labeled with a number, an aversion to question one, version two in this case, and question two, version one. So you need to take note of these as this will be necessary in your solution. And each student will have a different combination of version. So let's see. So yeah, in this case, when we suddenly two grids scope, this is the pdf is not really relevant. But okay, so in this case we have versions per question and you'll be able to, when you submit your PDF to great scope. So it doesn't really matter how you generate this PDF. You can type your work up or you can handwrite it and scan it in. And so in this case we had question one version to question to version one. You would match only two. Question one, version two, and question two, version one, and leave the other two parts unmatched. And I think grids may warn you about this and that's fine. It's expected that you're not supposed to match two, question one, version one and question two, version two. You didn't have those versions for they can because that hopefully clear to everybody or are there any questions regarding this process? There should be very similar to submitting kind of like a timed homework. And you guys will have also a chance to practice this. I think Jason has made it possible for you to take a dummy quiz and uploaded integrates scope so you can see how the process works. Yeah, this should be available on Canvas microscope right now for you guys being shipped. And after question, exactly. Hand-cranked answers and scan them, you can write them on iPads. The critical thing is that you upload the answers, integrates scope. Yes, there can only be a five minute difference between the submission. Enter the canvas quiz. Though I encourage you to submit on great scoop first and then submit on Canvas because we will be comparing the time slot. I don't think there's submission on Canvas, JSON. There is a submit button on canvas. Yeah, don't finish until the great goes this finish. Liquid. Unquote question regarding the exam. Exam, expect it to take 60 minutes or is like a few minutes of that dedicated to submitting the exam as well. Go 60 minutes is you should manage your time thinking that it includes attempting the problem and uploading to great. Okay. That five minutes is just like a grace period. Okay. Yes. Exactly. Any other questions? I don't think you need to submit quiz on campus after you're done. But yeah, you can. After US a bit unclear right now. Submitting on grade school, please. Critical. Yep. Submitting on critical but definitely critical on Kevin lambdas will timeout after 60 anyway. Yeah. Okay. Any other questions about logistics? Again, do definitely practice this if you have any questions, ask them during discussion session or post questions on Piazza. Okay. Why don't we get moving? I'm gonna stop. Can you stop your sharing? Yup. So thanks. And let me share my screen so we can continue on. So what I would like to do next is step quickly through various problems and have you guys input which problems you would like me to solve during this class. And as I step through it, you'll see that some problems are solved. Those are already recorded from the morning session. So here is a cmos problem. It asks you to design minimum transistor implementation. Here is the same thing that I already solved. Here is minimize the function from a diagram. A minimum number of transistors means again that we're looking at NAND and NOR and not gates. Here is a classical primes and the central primes problem. Here's one other that has don't cares. Here is an example of primes and essential primes were actually already solved it that included two functions and we needed two or the two functions together. And then phi1 prime are essential primes for that. Here is K map from Boolean algebra. Let's say you would want to do primes, essential primes and minimum cover. Yet another K map. Here is a word problem. This was minimum number of transistors. So we looked at NAND and NOR gates. Again. This is similar thing, but word problem that actually has two outputs. So you would need to designed those two outputs. In other word, problem that looks at either minimum transistor or minimum gate, a NAND gate implementation. And this one I solved already. Here is a mystery gate which was also solved. This one had the transistor base circuit. Here is a beautiful bucks cascading max problem. Again, very common to have things like this. Here is another max problem that says implement the following function using minimum number of muxes. And here is a mux and the decoder problem that the US, how do you implement this? What function does this implement? And here it's adder and decode or problem that asks you to figure out what needs to be connected to make this function work. Okay, and I think the last one is just Boolean logic or Boolean algebra minimization. So how to go from that uglier expression and get to a simple expression in the end. So what problems would you guys like me to solve? Please write your vote in the one there, just by the number of slides. So for example, this slide number is 21 in the one. Whoops, whereas before the one before it would've been 19, I don't know what happened to 2020 must be hidden. So what are your preferences? Where would you like to start? Okay, I see a lot of people liking 19, So let me go to 19 as a beginning. And please by all means, do vote. Continue voting because I'll next look at what is the next most frequently mentioned number. Ok, so let's get this started. First of all, this problem tells you that we want to design a circuit for primes. If the sum of two bit numbers x and y is a prime, otherwise we want to output prime equals 0. So let's first figure out when prime should be set to one. So if the output is 10, that's two, and that is a prime number. If it's one-to-one, it's also a prime number. It's 1-0-0, that's four, right? And that is not a prime number. The next one is prime, that's a five, and the next one is a six, that is not a prime. And for seven, we put the, don't care. Okay? Because for whatever reason, seven is not going to happen. What is the reason why seven he's not going to happen? Notice what I'm doing. Two bit numbers. So the biggest two bit numbers are 11 plus 11, or three plus three, which is equal to six. So that means when I'm adding two bit numbers, richer maximum 11, I cannot get number seven. So this is a great example of how you could get the don't care without actually being told that there is a don't care. So now that I have this, the next step would be to try to figure out what is it that I should do with these outputs of the decoder? Since I know that I have a decoder in my circuit, this was given to you already. And notice that this decoder is controlled by S1 and the carry out. So these two things control the decoder. Okay? So and because S one is on, because S1 is connected to 0 here and carry out this connected to one. Carry out is actually my MSB and S1 is LSB of the control. So this is an example in which top being MSB actually was not true because top was connected to the 0th input. So that means I'm going to be looking for these kinds of combinations of values when these two are 00011011, because this corresponds to 0123 output of the decoder right over here. Okay? So if both S0 and S1 are 0, the output of my function is a 0. So over here, I don't really care about this particular output because the function is 0 at that point. For the next one, the function is a one. So here I am gonna care. I need to combine this with another, or this is not a number five, this is prime, sorry about that. So this particular line is going to be combined with something else. I know I have another logic one over here. So there's going to be an OR gate. I'm going to need. The question is, what is going to be the other input to this OR gate? Okay? The last one is 411, and that's a 0. I can pretend that the don't carries a 0 because that makes my life simpler. So really the only one that's different is d, S is 0 or one. Okay? So on the S 0, on this combination over here, notice that this here corresponds to S 0. So the output will be equal to whatever S 0 is effectively if the decoder output is active. So to make that happen, I need the AND gate. So if I and the decoder outputs two with a 0, I'm going to end up with whatever the correct output this for my prime. So basically putting together these two gates gives me the minimum implementation or the correct implementation of this design. Okay, do I have any questions on this? So the question is, do I use S 0? I do, I use a 0 right here as an input to my AND gate, so I could draw this over here like that. Okay? How did that get values of prime? Well, I just looked at what is the result of addition. So the result of addition is shown by Carrie S1 and a 0. So the results of addition are 01234567 is a don't care. And of this, I know that these are not prime by definition. I know that 235 are prime. So that's how I got that. The other question is, how does this AND gate works? So that's actually from the definition of a decoder. Decoder outputs two has to be ended with that 0 in order to produce a logic one at the output here. So that is how I would get the correct output that this then 4d where the output, the decoder output one. So this is decoder output one. Okay? And the reason for that is because this piece here matches as 0. But this happens only if the inputs are, if c 0 and this one are 10, then the output is a to 0. So this term here is represented by decoder output two. So I have to add to that, wet the input as 0 in order to get output as 0. Okay. Any other questions on this 10 in this problem I did tell you actually drew the decoder for you. So you knew that there was an adder and a decoder and you just needed to figure out the rest of the gates. Okay. Any other questions? Question is how does to beat the other work? It's a two bit other works the same way as connecting two single bit adders. Read the initial. Here is the carrying out. Here is someone, here is some 0. Here we go. So here would be a one, but what did I call them? X, okay, so let me do axis x one x 0, y one, y 0. Okay? So this is your two bit either. So if I add two single to two bit numbers, the outputs, so if I have two big numbers, here is x one x 0, y one y is 0. The output is going to be a three bit number. And I don't have space here. Let me move this a little bit. So this here is d 0 to ANDed with HHS era. So I kind of skipped one of the truth tables basically because I wanted to make it simple where X1 0, Y1, Y2. So here is my two bit numbers. And let me do one of the last ones. Let's say that I have 1111 and the outputs are going to be carry out S1 and S is 0. So someone in sum, if I add 00 to 00, everything is going to be 0 on the output. Bad 0-0, 0-1. I will have one output, the carry of 0. Okay? If I add 11211, what I'm going to have is the 110 output, okay? And that six, because I've added three, I cannot have anything bigger than this. This is y seven is not possible. So that's why I have a don't care here. So how did I determine most significant and least significant bit? I looked at what it is connected to 0 and what is connected to 10 is the LSB, one is the MSB. So that's what told me. Okay. Any other questions on this one? You have a question. Right? So if you get one for S one and then we follow the wire, connects to the leasing that's kept it with the 0, which is 0, so does at once or in a 0 or is still a one. I did the question. So in this example, what happens is, is it doesn't turn to 0 or to u1. What this tells you is just what is most significant and what's least significant bit. So you can think of decoder as kind of looking like this. Really. Here is c 0 here as S one, here, 01, and here your output 00011011. Those are the outputs where this first bit c 0, and the second bit is S1. So it just tells you which one of those lines will be connected to logic one when all the other ones are logic 0. Alright. Thank you. Good question. Any other question? Professor Heller question and I'm like, are you just drill to see if that's the MSB? I must stop, sir. Thank you. Here is where the probe is. 1-0, okay? Now C 0 is the LSB. Okay? And I think you have in this picture, it was just the opposite way. Got any other questions? Okay. Then I'm gonna look back. What else you guys would like. I see 20 of one and then I see some earlier ones, like 3411. Ok, so let me do 20 once and somebody here, but super easy. So I would start with this equation and then I will step through and I would start first to getting rid of seas wherever I can. That would give me this setup. And then you could actually either use your K map or you could use consensus theorem to again factor out the a's and b's. And this gives you the simple solution, B prime or a. Ok, any questions on this? Well, let's specify that you have to use Boolean algebra to solve it. Yes, it would tell you that you have to use Boolean algebra to solve. It doesn't stop you from using K Maps on your, on the side to remind yourself on what the next step would make sense. I do have to see Boolean algebra steps though. You don't have to label the theorems. Okay? So let me go back and see some of the other problems. They somebody asked about cascading mux, where it's my cascading Mux, I just cite this one. So let me do cascading mux next, because that tends to be quite confusing for people. So with cascading Mux, I often like to actually start with a K map because it makes my life a little easier to. And on the key map, I'm going to arrange variables like this. And let's see 01234567. And notice that this is product of sum, sum putting zeros in, so here is a 0 and then 67 are zeros and the rest are ones because there are no don't cares. Okay. So now I'm going to notice that the first term, first mux is controlled by a, the second mux is controlled by b. Okay? And one of them is already solved for me. So if a and B are both 0, right here, the output is C prime. So all is, well, I don't have to worry about this one. Notice that the enables are connected to one in this problem. I just copy the small piece of the text of the problem. But in general, when enable is there, assume it's one. So first column is solved. Notice also that when b is equal to 0, for the other case, it still outputting C prime over here. Which is kind of an interesting thing. Now, we want to look at the other cases. What happens when a is equal to one? So if a is equal to one, that is this case here. If a is equal to one and b is equal to 0, what I would want to output this, what's over here? And what is over here? It is a logic one. Do you guys see that? So if both a and B are 0, I'm outputting C prime. If a is one, B is a 0, I'm outputting a logic one. Okay? So that's what this first question markers that leaves me with this middle column. And in this middle column, B is equal to one. So this is b equal to one. And here the question is, does this depend on a? And you can see that here, it doesn't depend on a at all regardless of whether a if a is, sorry that here, it does depend on that because if a is a 0, output is a one. If a is a one output is a 0, but it does not depend on C. Whether C is a 0 or one, output is the same. So you see that here, all I have to do is I need to put a prime, because the output will be a logic one if a is a 0 and logic 0 if a is a one. Okay? So when b is equal to one, and I could have also done that by looking at this. If b is equal to one, output is a prime, because B is one. Okay? So that's how I would have solved this cascading mux question. There's a question if there's a way to do this Boolean algebra, there is. And by the way, this problem said that there is no don't cares. I just didn't copy that part of the problem. So how would you do it with Boolean algebra book? You would remember how we actually have a mux working. So here's my selector bit. Here is my a, here is might be, and here's my a function. Let say Y. Y is going to be equal to selector prime ANDed with a 4D width selector ANDed with B. So you can just apply this to each of these muxes and try to match the outputs to the equation that you have it. So you can certainly do it in some cases it's easier with Boolean algebra, in some cases it's easier with K maps. I find that generally easier to start with K maps personally. Any other questions on this? Okay. Let me scroll back and see what are the problems people asked. I see 11 and then 34. So let me go backwards. What is 1111 is a nice one. So this asks you for absolute distance between numbers. And notice that you have two bit numbers. So the numbers are ranged from 00 to 11. And if I'm asking for a distance iMac, actually asking for one number minus others. So I'm really asking for x minus one in absolute value. That is what my distances. So I'm going to get only positive numbers. So if I have 0 minus 0, the outputs will be 00 minus one. It would be one. So in this case, it's pretty simple to fill it out. So one minus 0 is again the 11 minus one is 0. Then one minus two is one. And here I have two. Then I have 10010001. And the last one is 11100100. Okay. Is everybody okay with how I filled out D1 and D0? Professor, Could you explain high-end content? I can click. I'm what I did here is I looked at what is x minus y, and I took the absolute value. So let me pick, for example, this one. So x 01, which corresponds to decimal one. Why is 1-0 which corresponds to the decimal two? I subtract them, I get negative one, but then I do absolute value and that gives me 01 for the output. Ok. And I did the same for all of them. Okay? I'm going to assume that everybody's okay with this. So now that I have this, I can actually start implementing my functions. And I'm going to do here only one of them. And trust that you can do the other, because they're basically very similar to each other. So let's look at where I get logic one out, but I get two 1's over here. So if I have 00 outputs are logic one over here, the rest are zeros, then I get one logic one here. And that is down here. Then I get one logic one over here. And that happens with zeros. And then I have to logic once that happens, oops, I think I just missed up. The song should be here. And then 411, which is this set over here, I have two logic once at 0001. Did I pick my logic once correctly? I think I'd then, but let me know if you see some mistake. The rest are zeros. Okay? So my next step is going to be to do my primes and essential primes. I guess. Let me double-check. There's some concern here. So on 10, that's this column here. The logic one is at 00 for y 1-1-0. So I think that's correct. And on 01, the logic one happens at 11. So that I think is correct also. I'm okay actually, okay. Let me go back to my primes and essential primes. So I'm going to start from the top and I'm going to draw priced. This is one prime that I can do. Here is another prime that I can do. I don't think there's anything else that I can do here for any of those three once, then I'm going to move to the bottom. Here is one prime, here is another prime. And I think that's pretty much it. And it turns out all of them are essential. So D1 would be equal to x one, y, one prime, y 0 prime, that's this one. Or width. X one, y one. And then the other one is going to be, what? Oops, x one, sorry, x 0 and then y one prime. And then I'm going to do the bottom one. So let's do this. This is going to be X1 prime y one y 0, or where the second line is. X one prime, x 0 prime, and y one. And that's it. That's my minimum implementation. Can you do lower-left corner with the upper right corner? This one isn't though. Because it becomes a diagonal. It doesn't fold along the diagonal. Okay. And position 69 should be one. Position 69, hm. Which one is 6110110? I think one should be here. Let me see 01 logic one output, there's only here, and it's one only port dest. So no, I think you're wrong. I think this is correct. Any other questions on this? So again, I'm not gonna do the part b because all you need to do is just move 1s into this K map and do your essential primes are primes. What I would like to do is move to a different type of a problem. And that is going to be either number three or number four. So let me see first, what do we have number four already dead. So let's do number three. So this is a minimum transistor implementation. In the previous problem, when I did the distance, I was asking for the minimum number of gates, which is what we actually, what I gave you. That was the minimum sum of products. Okay, so now we're already doing minimum transistor implementation of F. This means that I'm looking for NOR and NAND gates. When you have something like this, is the, the technique to figure out what the gate is of the cmos best to figure out where 1s are with the, with the series. And then after that, just fill in your zeros or ones for the rest of it. I guess it always, depending on where ceres is out. Okay. And then just weight faster. All right. And here is my, oops, I can't label. That's why cuz I got to layout. But so let's call this x and w. W and y is the output that's over here. I don't know why it has the funny joke, but it does. It's a wire with a jock. So now I'm going to ask myself, when is this on? Because that's the only time that I'm going to get a 0 output. An NMOS is on if both inputs are one. So this is when I get a 0, the rest of the times I get a one. So that makes it super easy because it tells me that y is equal to x. W not are the same thing as x naught or W naught. Okay? F is equal to y b. But I know what y is. I know that y is equal to x bar or w bar. And that would be, so that's going to be x bar B or W Barbie. And I know what the x's. So let me do this. X is equal to a ended with B. And I'm gonna now that, and that would be, that's my x bar. And I know what my w bar is. That's a ANDed with C with the bar. Are we OK so far? It seems we're OK so far. So I'm going to move on. And I'm gonna do DeMorgan's a prime or b prime. And that would be ored with a prime or C prime. Anded with B. Didn't mess up somewhere. I did. Why am I doing these ions would be that's really stupid. What I really should've done is B and then a B bar ANDed with a C bar. That would've been much smarter. So here is this, and now I have a prime, or b prime, or a prime or C prime. Which actually fortunately for me, simplifies into, first of all, these to a prime, S1 can be cancelled. Secondly, b prime and b cancel out. So I end up with B, a prime, or C prime, which is the same thing as B ANDed with a c bar. Now notice that here, I don't have the minimum transistor implementation because really what I have is a NAND gate, which is good. But then I have an AND gate which is not so good. So what they may want to do is just do kind of a double prime here. And what that would give me is a single bar width b bar ord with a bar or c bar bar. And this actually makes me pretty happy. Why does this make me happy? Well, it's great because I end up with two NOR gates and some inverters. Gap. I could have also done this. And what would that, that given me? It would've given me b prime or a C NOT, NOT. Okay. I don't want to get rid of these two knots because I need a NAND gate. So in one example, if I'm drawing the circuit on the left. So this circuit with have a NOR gate here. One input to the NOR gate would be the, be the inverter. The other input to the NOR gate would be another NOR gate. With two inverters, sorry, connected to a and C. This swan I think is a simpler one. So here is a NOR gate. One input these an inverter with a B. The other input is a NAND gate, but this NAND gate has doubling version. So here is a NAND gate and here is another inverter. And this has a and c inputs. So this one has four transistors, two here, two here, and four here. So I get a total of 12 transistors on the other one for four, but then I have three inverters, each with two. So here I have 14 transistors. So this one is the happy one. Got. So we would try it both ways and then pick the one that has the least amount of transistors, node beer answer. Exactly. And you want, you don't even have to draw the NOR gate because you can see that it has inverters on the a and C, which would be more inverters than a single inverter opted a NAND gate. I draw it just to make it very obvious. And I also had a question somewhere back here on, isn't this wouldn't be ANDed with a c bar be less transistors. So this would be an AND gate which needs to be implemented like this. And it would have an additional NAND gate with a and C. So this is four, this is four and this is two. So that's then, So you're right. That's even better. Okay. This was a super tricky question. Get any further questions on this gap. I think I had the number four I solved already, so I'm not gonna do that again. Let me see which other ones. I had people asking 11 did they didn't really think I did. Maybe let's see, 567891011 already. So what else can we do that would be helpful to you guys. I think I did all of the later ones. And they did this one. So let's go back. Which one would be particularly interesting. How about minimize function from the diagram? What do you think? C, Let's do this one. This one. Gives you a pretty complicated function. Add that then it asks you to do a minimum number of transistor implementation, sorry, right there. How many fewer transistors doesn't have compared to the original circuit. So at the original circuit has two over here, four over here. This is 666. I have 123 times 618 plus 12 times four plus four. So that would be way too many. 1620. So 30 transistors then I did this, right? That's like a lot of transistors, but it's only a 3-input function. So we should be able to actually do this in less transistors. Now, we can do a pretty complicated Boolean algebra problem, or we can try to do the instead, came up and kind of tried to solve the K map by propagating values through the circuit. Ok, let's start first with this OR gate. This OR gate will give output of one whenever sees a 0, right? So if c is a 0, output is going to be one. See, this is super easy. Don't you love it? Yeah, so far it was nice and easy if C is a one, unfortunately, that doesn't help us at all. So now we have to look at this next OR gate. In this next OR gates were super lucky because there is a not here. So whenever a is a 0, this is a one. And output again will be a one. So a is a 0 over here. So then output is a one. Ok? So now I'm down to only two things that I have to check, which is not so bad if you think about it. Okay? So now a is a one, which means I have a 0 on top, I have 0 on here. So now the question is, how does B affect us? And that we kind of have to look at if a is equal to U1 and if c is equal to a one. How does that affect the NAND gate? So if you remember a NAND gate, let's say x and y zeros, zeros or 11011 NAND gate outputs a 0 only if both inputs are 0, sorry, only if both inputs are one. So both a and b would have to be one in order for me to get 0 here. And both B and C would have to be one in order for me to get 0 here. Otherwise there'll be a one. So if a and B are one, I'm in this column. If B and C are one, right over here. So that means only in this particular situation will I get 0 out, which means that that would get a 0 output of the OR gate, which means that the whole function will be 0. Otherwise the output will be 01. And let's double check that I did this next von correctly. So I have A's a one. B is a 0, C is a one. If that's the case. My outputs here are going to be one which means the OR gate will be a one, which means this OR gate will beyond which means the output will be one. Ok? So check out how super-simple this problem impact as there is only a single 0. So this function y is going to be equal to a naught or B naught or C naught, or it's equal to a, b, c, not otherwise known as, oops, not the NOR gate. A single NAND gate with three inputs. And how many transistors does it have? Well, it's going to have three transistors on top and pMOS. And it's going to have three and then mus. Because for each input needs to transistors, so total six transistors get. So because it's a NAND gate, you only need three on the bottom and three on the top. Remember that? So this is what this thing would look like. A, B, C, a, B, C. And here is your output y. Yep, it's always two transistors per input. For a three input gate. 3-input NOR gate also has six transistors, but it's kind of the complimentary to this. So it will have three PMOS transistors in series and three n MOS transistors in parallel. Alright, any other questions on this about the XOR, XNOR? I actually told you at the beginning when I talked about cmos gates that both of those have eight transistors. And if its three inputs, I'm not gonna put it on the exam. I you should be okay. Okay. Any other questions on this? This was actually a pretty nice question because it allowed you to solve a problem much more easily than you would if you had gone. But Boolean algebra, you would have wasted a lot of time on this with Boolean algebra. But paying attention to where or gates or were AND gates are. So if I had instead of OR gates at the output, if I had hand, here, would've been looking for cases when inputs are 0, because that means that I don't care about the other branch. As long as input is a 0, output will be a 0. Okay? Okay, I think I solved everything from beginning. So let me go back here. I got bunch of primes and essential primes. How about we did this circuit from number 11 circuits for them very low in this thing. I'm a little lazy, but the, but this one was asking you to draw the minimum gate, which is the sum of products implementation. So you would have had this big or gate with a bunch of And Gates filling it. And each AND gate will have three inputs. So that's what that would look like. For something this complicated, I will not ask you a minimum number of transistors because it's a total pain. But he certainly could, you know, you'd have to do a bit of Boolean algebra. So I'm gonna go back to this. This seems a little more unusual since I don't give you normally Boolean algebra to go to came up. So let, let me first label my thanks. Because that's going to correspond to particular sets of primes. And now I also need to implement XOR. So XOR is a prime c or a c prime combined with b, d, then this one, I need to compliment it. So this is going to be a prime c prime B, D. Then I have a prime, b prime the but are missing C. So I'm going to add C or C prime, and then I'm missing a. So I'm going to do a or a prime, B, C prime, D prime. And notice that here I'm actually trying to get to some canonical representation. So that way it's easy to put things in K map. So the first one is a prime b, c d, then I have a B, C prime D. Then I have a prime b, c prime d. Then I have a prime b prime c prime d. Then I have a prime B prime C D and a prime b, c prime d. And the last one is a B, C prime, D prime. Okay? So I'm going to start with when a and B are both prime. So I look through here. Here's one example. Here's another example. Those are the only two examples. And what I get is C prime D and C D. So C prime D is this one, C D is this one. So that is what my logical ones are. The rest are zeros. Okay? So I'm going to scratch this out. I did forget the prime. Thank you. Okay, the next one is going to be 01, so that is a prime b. And that I have over here in the first one. Here is one more a prime b. And here is we're more a prime b. So c, d, that's over here. C prime D that would be over here. And C prime D prime that's over here. So I'm going to scratch this. So I don't look at them again. Okay? Now I'm going to look at a B. So that would be here. And here. And I have C prime D, that's this. And I have C prime, D prime, that's this. I'm going to scratch those and I think that's it. I'm done. So that means the rest of this is 0. K Is everybody. Okay, so far. Okay, now I'm gonna, whoops, not too though. I'm going to change color here and we get to do primes and essential primes. So I'll start up here and ask myself, what is the biggest prime implicate that can draw? And the biggest one is a square. And that's pretty much all I can do because there's nothing else to combine with. Same thing happens for the next one. Now I go down. For this particular one, the biggest one is another square I can draw, and that's pretty much the biggest I can do. And I think that's actually all I can do. I don't see anything else here. Notice that here I have two primes that are also essential because they're the only ones that cover debts. And my minimum cover is equal to o. Let see, what is it? It is equal to b, c prime, or a prime b. That's my minimum cover. Now what if I want it minimum transistor? How could the improvement that, wow, I could basically just let, let's actually first think about what gates I have here. So if I was doing it using normal and the NOR gates, I will have this situation. I would have 2n gates, one would be one weight, not from C. And here I would have one whether or not from a and one with a D. So one way to create nans at nurse would be to do bubble per share. And what that would mean this I could just push these bubbles through and that would give me NOR gates over here with inverter on B but not on c. So here is NOR gate here with a and then inverter on D. And that connects to this NOR gate, which I can just add an inverter truth. So this result would give me 123 NOR gates and three inverters. Okay? So three NOR gates as 12 transistors, three inverters is six, that gives me 18 transistors. The original design had 18 transistors plus two inverters, which is four, so that's 22. Now I could have also done my DeMorgan's theorem so that with a given me not of B C prime, and that width not of a prime b, which would have given me a NAND gate with two NOR gates. So this would've been B? Yeah, sorry. It's the thing that set actually. So this would have given me two NAND gates. One then get here, one NAND gate here, one then gate here. So that's three Nance and two inverters, which is actually smaller. So this is a better implementation. Okay? So how was XOR reduced? Xor is basically implemented as a prime c or a c prime. And you can see that from the truth table. A Zora, C, a 00110110110. So you look at when the function is one and it's one, if it's a prime C, or if it's a C prime. That is how I did that. Okay. Any other questions on this? Ok, let me see what else I got left. I got lots of K maps. I think I, that all the transistors. So let's do product of sums, K map. So product of sums will do, want to have this labeled. Okay? And now I put don't cares in. So here isn't don't care. 11 is a don't care right here. 12 is a don't care right here, and 15 is a don't care. Okay? And now I'm gonna do the once. So 0 is a one to 167 there once. Eight is a one in, ten is a one. The rest are zeros. And notice it's asking for implicates. So here I really want to look at zeros. So I'm going to start with this. And I'm going to grow the biggest possible input kept around it, which is going to be this square. And I think that's pretty much all I can do around that 0. Don't care, I'm going to skip and I go to next row. I look at this 0, this 0, the biggest that I can grow is a whole row, which is kind of nice. And I think that's it because the other square is already there. For all other zeros. Let's move to the next 0. This 0 can also get a call it right here. And I think that's it for it. And actually I can do this square as well. So that covers both of the zeros left in death row. The next thing I'm gonna do is look at this 0 here. So what can I do here is I can create a square along the edge right here. And I think that's pretty much it for the 0 and the 0 on the bottom I've already covered. So that's all. Okay. Now I ask, so prime implicates, how many would you have? You would have 12345, I believe they do. It's great. I think I did. How many essentials would you have? Let's highlight the essentials. This one right here is essential because it's the only one that covers that 0. This one is essential because it's the only one that covers 0 on space 14. And this one is essential because it's the only one that covers the 0 on four. So there are three essential primes, OK? And give minimum cover. What I would do is I would look at first that the square up there, 011110. Okay? So this square is going to be equal to b, oops, b prime or C. Then I'm going to do this square here. So that is going to be equal to B or D prime. Okay? And then I'm gonna do the column, and that is going to be a prime or b prime. Ok? Any questions on this? Okay. Let me see what else we got on to. I think I did I have a word problem. And I think all the rest. So the it's between the word problem and came up or do you prefer? And I think I might have enough time to do both, but I'm not sure. Okay. Well, I'll start with this K map. So this would be 0123456789, 101112131415. And here, don't cares or 36123612. There's 12 and ones or 24. So let's do 2479. So here's seven. Here is 91011. 10111414. The rest are zeros. And we're gonna label this. Ok. Now I'm going to change color of my pen to, let's say green. And we're gonna do prime implicates. So this is sum of products. I start with a one here. The first thing I want to do is a square and like this. And I think that's all I can do for one. So this prime applicant would be, what would be B? D prime. So that's one. Let's move to the next one. This one, this one would have this prime and pocket. And I think that's it. So this one would be a B prime. And then the gap. Then I'm going to move to this one. And this logic one is going to have a square here. So that prime implant would be a prime C. And there's nothing else I can do here. So what I will do next is look at the next one. So here is this one. This one has the corner box like this. And that corner box would be B prime and C. And can I do anything else? No, I can't do anything else for that. So now I move to the bottom one. And this bottom one has a whole row. So the whole brow would be C The Prime. And can I do anything else for that one? I don't think so. Okay. So nothing else there that I move to this one. This one can have also this combination here. So that gives me, that would be a, B and D prime. And I think that's it. So that's all the prime and Perkins. So b part is identify central prime. So let's see what's essential here. Of all the SWOT did they get? So this one is essential because it's the only one that covers that logic one. So that is BB prime. And I think, let's see. So this one has cover here, it has covered here. This one is a central over here because it's the only one that covers that logic one. So that one would be a, B prime and d. That's essential. I think the other ones aren't essential. I believe Let me double-check. Maybe this one is essential. Yeah, so this square is also essential here. And that square is a prime C. So I'm finding three essential ones. This here is not essential because it's covered by two of them. And the minimum cover would be b, d prime, or a prime, D, or a, C, or one of these two that cover that logic one. And since the bra, It doesn't matter, it can be the row or the box. So let's say that I go with rho. Rho would be c d prime. I could've also gone with the box. And box would have been b prime c. Okay? Maybe I messed up on the last essential prime, was a B prime. Nowadays, a B prime. This here is a b prime d. Okay? Any other questions? For part a? The last one being a B D prime. Well, let's see. A b is in the Coulomb, so that's correct. And D prime is correct because it crosses from top to bottom. So that does look correct to me. Any other questions? Professor says there's two ways. Choose c, d prime and p prime. C, like the rover, the box would not make it an essential prime sensors to ways. Ok, why did I mess up? Which ones are you saying? The C, D prime. D, D prime is this row that the box up here. And then it says, oh, I was just going based off a C. And the last one, the edition had seeped. Deep ramp or b prime c. I said we could choose either oil or this, this, or this. Yeah, yeah, so decimal, none of those are essential. These are not essential for okay, so then, oh, cookie areas, this, so really I'm selecting just one of those two to get. Okay. Okay, I get it. One of those do because otherwise you haven't covered your function. Let you have a choice between those two. You can choose one or the other. It doesn't matter. Okay? All right, thank you. So essential prime applicants may not cover all 1s. And this is a great example of where that's true, where essentials did not cover all of them. So you have to pick one up, the redundant ones to cover the rest. Okay. I think I've pretty much covered everything. There may be a K map that I didn't solve, but honestly, I don't think it'll be hard. And there's this word problem. The word problem really has to do with you figuring out how to write a Boolean equation. So you have three fail-safe sensors and one emergency switch and the line should keep moving unless one of the conditions arises, right? So you have. 123 sensors and the emergency switch. So that means I got four inputs. So I would probably do like a K map style on this kind of problem. And I don't know, sensor $0.03 or two. Sensor one and emergency. How about 0001111000011110. And then line keeps moving, which means L equals one. Keeping moving unless any of the following conditions arise. So emergency switch is pressed. So that means whenever A0 is equal to one, then line stops. So I got a bunch of zeros in here. If sensor one and sensor two are activated at the same time. So that means sensor one is one which is here. And since R2 is one which is over here, so if they're both one at the same time, then the line stops. So here is that. Okay. So I did this one, I did this one. Extensor three and sensor two are activated at the same time. That's this column. So I put the 0 in here. So I did that. And if all of the sensors are activated at the same time, I think I already selected that. So the rest of the time, the line is moving, which is really not a whole lot of the time. So based on this, you would just circle your logic ones and implement the function. Is everybody okay with this one? So in this case, if I was doing, let's say prime, whoops, inches, do, sorry. Press the run button. If I was doing essential primes, prime and Perkins, I will draw these like that. So that would be my two prime implicates. There's only one around this logic, one, and there is only one vertical and one horizontal here. Ok? And now I ask the essentials, and the essentials are going to be in green color. So the essential is this one. Because that's the only way I'm going to cover that bottom logic one over here. And this is the only way I'm going to cover disk logic one. And they essentially is over here because that's the only way I'm going to cover dot. So I have three essential primes. And they all have to be in minimum cover. Four corners. How did they miss that? Thank you. That's terrible. Don't do that. Don't do what I do. Do the correct thing. Arie, go, great work. There. I'm going to fix my problem very rapidly. Here is my Four Corners. Okay? So I have two essential primes. Ok, and let's see what my four corners is. So in four corners, I have S2, which is a 0, and I have E, which is a 0. That's my four corners. And I have the two sum bitches as three prime. And S one prime and 0s. Okay? So that's all there. Last problem I think I did at all. Thank you all for helping me make sure that I did this right. I'm just kind of scrolling through it, making sure I got it all I did. At back. Someone had a question on a previous problem with Republicans. Remained mute. This one. And what was the question on that? Y is a b d prime a prime implicate if it's covered by the other box. Ok, well, let's see a, b. So here is a, b and B. You're right. It's not. I messed up. Thank you. So this one we just erase. C. This is the beauty of me doing this with a active pen like this because erasing is super easy. There you got all fixed. Thank you for catching that. Okay. Anything else or any other questions unrelated to this year for number 12? How do you determine which ones you want to be on the top left corner, say you did S1 on the bottom and then S3, S2 on the top. You're asking me how to get the corners, not the corners. Ucl, when you initially draw the box, you have to determine where you want. If you want the S1 to be vertical and then S3, S2 to be the horizontal ones that I kind of did it branded? It doesn't case. It didn't matter. Oftentimes, yams are actually provide you with a K map specifically labeled and then expect you to fill it out using that particular labeling. And the reason why I do that, then we get a lot more consistency in grading. I don't end up with lots of mistakes. My graders and okay. Alright, thank you. And the other questions, I think you guys should be pretty well covered. When it comes to this, I would really advise you to practice some of these problems on your own. I haven't solved all of them during this particular lecture. So use the ones that I haven't solved during your lecture at home to solve them yourself and then check also. So I would suggest strongly that you solve this simple midterm. But don't solve the ALU problem. And then if something is unclear after you see the solution. As during the discussion session, the discussion session this week, obviously we'll cover more sample problems that are similar to what's gotta be on exam. If you have any other questions or any other issues, please post them on Piazza prior to discussion sessions so we can address it or just posted on Piazza prior to nine AM on Thursday so he can answer. Starting at nine AM on Thursday. You will be able to post only private questions which will be answered if you ask them between nine AM and 10:00 PM, we're actually going to be monitoring Piazza pretty closely. Okay. Anything else before we close for today? Thank you guys. I really appreciate all of your help today and all of the great questions. And I wish you all the best on the exam. Let me know if there's anything I can do to help buy.