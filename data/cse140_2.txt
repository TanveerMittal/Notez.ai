 Hello everybody. Welcome back to class. Super happy to be seeing you today. So today we're gonna be continuing on with what we started last time on switches and cmos circuits. So what we covered so far is the quick introduction. We talked a little bit about why bother learning about hardware. And honestly a lot of that has to do with the fact that there is a pretty dramatic change that is happening, which is resulting in design of a lot of new different types of accelerators. So people write software, will increasingly need to be aware of what the hardware is capable off so that you can create software that's more energy efficient and that's much faster. So last time I gave an example of the work we're doing to accelerate COBIT 19 analysis. And this time, I would like to tell you a little bit about doing secure computing. So it turns out that there is a new approach that's been designed called fully homomorphic encryption. And that has been prefer, proposed in the last years that would allow us to do completely secure computing without ever sharing any data that's private to us, that the data will be encrypted. Computation would happen on encrypted data. Which is super exciting except for the fact that it's really, really slow. And the only way to make it fast to implement accelerators for it than hardware. So just this last year in 2020, a student did in my group who designed the first ever fast circuit that can implement the slowest component, the fully homomorphic encryption directly in memory that has resulted in performance. That's literally it, 1000 times faster than the fastest possible designed to date. And they compared it to the Microsoft's library that has been already published and is in use. And what we're working on now is the next generation version of this that will design both server and the client accelerators to perform this kind of secure homomorphic encryption in hardware. And all of this is based on, in fact, knowing how to leverage C mos transistors and how to leverage memory better. So today we're going to go more in depth on cmos transistors will get into gates, will start with the inverters and then we'll talk about NAND gates and also about AND gates. I'm hoping to get to Boolean algebra at 09:30 AM. I did not get through it, so I think the odds are against us, but I'll certainly get to Tuesday. Homework number one is assigned its due next Thursday at midnight Pacific Time. So feel free to go on to I think I'm canvas and on website that should be posted very shortly, if not already, sexual gone slides have been updated them both cameras and on the web and I will post the version with notes. And then office hours do begin to. They do come visit my amazing TAs and Tutors. If you'd like to chat with me, I'm always open and excited to see you send me an email my next office hours next Monday. And I think that pretty much covers the status of where we're at. Does anybody have any questions or any issues that I should know about before continuing? Okay. So let's get moving. It's time to dive back into C mos switches. So I would like to first do a quick review of how we designed and MOS transistors. And then I'm going to go review pMOS transistors. And then we're going to actually talk a little bit about delay and get into design of very pursed inverters. So the NMOS transistor, what really stands for is negative charge. In this negative charge is how can we actually introduce into source and drain regions the intro by putting in special type of material that provides a little bit of extra electrons than otherwise would be present in silicon. We also have gate, which is made out of material that's very similar to metal. This is why we have em in cmos name. They have oxide underneath the gate, which is created by exposing silicon to air. Which basically create silicon dioxide, which is an amazing insulator. Does anybody know what silicon dioxide actually is when you produce it? Now? Glass, Exactly. So little. Did you know that in your pocket you're carrying a whole bunch of tiny little glass, but in fact you are. And it's super thin glass. So and that's actually one of the issues that were coming across. So when people talk about Moore's Law dying has to do with the concern that this oxide is going to break down and stop being an insulator because of the large electric field that's across gate and the substrate which is silicon. So how do we get an n MOS transistor to work my way, I have to put the right type of charge onto the gate. So we already talked about the fact that source and drain will have a little bit of negative charge. Do you guys remember what kind of charge do we put that the gate in order to turn the NMOS transistor on. Pause it and if exactly. So it's positive charge, which is often called its Vdd or power supply, which is approximately one bolt. Or a logic. One. So if we put positive charge and the gate, this little capacitor, well attract negative charge. So this little circles actually are there to represent electrons that get attracted to the surface due to the positive charge. So here is where we have that little capacitor that we were talking about earlier. That's capacitance C. Now because we have turned on the transistor, we have created what's called the channel that has a bunch of little negative charge. So now the current can flow from source to drain. That's the good news. You can actually pass zeros and ones from source to drain. The bad news is that silicon does not conduct all that well. So in fact has some resistance R. So when they pass these zeros and ones through from source to drain, it actually isn't perfect. It, it actually has sufficient resistance to cause some delay. So that is where resistance R comes from. And I had an excellent question of can we put more than one vote? And in fact, in the past it used to be more than one volt. Used to be when I first started doing the design, it was five volts and then it dropped down to three volts, and now it's down to one volts and it's still dropping, but it's unlikely to go much lower. And this really has to do with electric field. So, and it goes back to physics. So I don't know if you guys have taken physics or not. But basically what's happening is you have this transistor then has super thin oxide and really tiny gate that is very narrow. This width here is what's called the minimum width of the gate. So I'm drawing a 3D version of this. Here is my source, here is my drain. This size is very thick. It's huge, so totally not to scale. Nearly infinite relative to size of the gate. The gate. Now it's around six nanometers wide. So it's super narrow. And this sizes are also very small on the order of a few nanometers. So what happens here is if you put voltage that's much higher than one volt, this oxide breaks down because the electric field, which is proportional to the area and area, it's very tiny. It's an nanometers. This electric field becomes so huge that it destroys the insulator completely. So instead of being able to have a switch, what you end up with is something that's on all the time. So that's bad news. So this is why we're at approximately one bolt or we're not gonna go anywhere close to five volts anytime in the future. The other reason why we're gonna go towards 0 volts has to do with turning on this channel. So when we turn on this channel, the natural voltage at which it turns on is approximately 0.7 volts. So once the voltage is greater than 0.7 volts, this channel starts being created, then it turns on. So if you drop voltage closer to 0.7, you will end up in a situation in which you cannot turn it off anymore. So the boat, the good turn on voltage that we need in order to have a switch is above 0.7 and somewhere around one volt. Now as we shrink this length, the voltage will drop closer to 0.7, which means that this transistor is going to be leaking current more and more today when you think you have turned on and off, you actually haven't. Unless you remove the power supply, the transistors are still on, and this is why in sleep, your battery still getting drain back. So then I had another question of how the electrons get to the source and drain. Originally, they get there because we've put material that provides extra electrons. So we basically put a little bit of doping is what material is called that just naturally has more electrons in it. And then I had a question of what BDD and g and d are. Vdd is a power supply and G and D is ground. So if I were to put a battery that has 1.5 volt, which I won't do because that would kill my transistor. But our typical triple a, double a batteries 1.5 volt. I will connect its positive terminal to VDD, which would provide plus 1.5 bolt. And I would connect its negative terminal to the ground. And I see I have an electrical engineer here who's asking me if 0.7 volts is related to cut in voltage of the diode, then the answer is yes. It's exactly the same mechanism that happens in transistors. And unfortunately this voltage we can't fix, so we're kind of stuck with your approximately 0.7 volts if we're using silicon base transistors. Okay, So long story short, when we put positive voltage, that turns it on. If I put 0 volts or a really known as negative voltage, then it turns off, it does not conduct, so it behaves like an open circuit. So in this case, we're gonna have an open switch. And in this case, 01 at the source cannot show up to the drain. There is nothing. Okay. Any other questions about the NMOS transistor before I move on to the PMOS transistor. Ok, let me move on. And actually I just realized, I forgot to introduce you to a couple of my TA's and I see that brushes here. So Richey, Do you want to introduce yourself? Sure. Hi everybody. My name is Rishi. I'm a fourth-year PhD student under Professor grossing. I work on machine learning and embedded systems. And this is my first time game for this course. Excellent, thanks Richey, Do we have anybody else of the staff who hasn't introduced those thoughts? I'm here. Excellent. Can you introduce yourself, please? Hello everyone. I'm chasm. I'm also a fourth-year PhD student working with Professor Diana. I hope everyone will have a nice courtroom. Excellent. Anybody else? I think we're all set to get moving. So let's move on to the pMOS transistors. Pmos transistors, we have exactly the opposite situation. So now we have a bit more positive charge that we have placed there by putting a material that has a little bit more of a positive charge in both source and drain. Gate here is similar to what we have in an NMOS transistor. So it looks like a metal, even though it actually isn't the real metal anymore. And what kind of voltage that we want to put that the gate to conduct. So too have the PMOS transistor turn on. Do we want positive or negative voltage at the gate? Negative exactly. So if I put a bunch of negative voltage here, I'm gonna attract positive charge from silicon substrate. It's going to show up right underneath the oxide and it will create what we call a channel. So now I can start having a current go from the source to the drain, and it's going through some amount of resistance. This resistance is here because silicon is not perfect. We got still, we're assuming it's exactly the same amount of resistance between pMOS and nMOS transistor. This turns out to not be exactly true, but it's close enough. So we will pretend that it's true that make your math a little easier, okay? Now if I do the opposite, They pipe with positive charge. Here, data that track negative charge to the surface and we will not be able to conduct, we would end up with an open circuit. So if I put 01 at the source, nothing will show up because we have open circuit. Ok. I still have my capacitor. If I look from the gate perspective, I still have capacitance C. It's exactly the same capacitance than I have with an NMOS transistor. Ok. Any questions about this? Okay, so let's get movement. So when we actually put nMOS and pMOS transistor together, we know that the NMOS will turn out that gate is connected to one. We know that PMOS turns on when the gate is connected to 0. Big, it turns out that en-masse passes zeros really well, but it doesn't pass ones as well. This has to do with the properties of the material. The same thing is the case with PMOS, but the opposite, PMOS does a great job of passing one's wall, but not so great job of passing 0 as well. So what happens because that is the case. What we do is we put PMOS in what's called pull up network, or the network that is connected to logic one, because it passes one's wealth. Nmos is connected to ground, which is 0 volts, or logic 0, because it passes zeros. Well, okay. Now notice that between the two is the output signal that I would like to create. The other important thing I want to draw your attention to is this symbol here. This symbol here signifies that I might have multiple wires connected. So I, for example, I may have four inputs, a, B, C, and D. Those four inputs can be represented as a single bus that is equal to. And we can imagine that this is a little thicker, four wires put together. So normally, if I have four inputs, a, B, C, and D, I will represent this with a little line across, and I will put the label four. This means that up here, I would have for pMOS transistors and for n MOS transistors gap. And it also means that these transistors need to be connected in such a way that either only one comes out or only 0 comes out, but not both. So either on the top is on, only bottom is on, but not both at the same time. Because that ensures that I have made it more MLA. The power consumption. Because all I'm gonna do is I'm going to put, if I'm passing a logic one out, I'm gonna put some positive charge on the next set of gates. Or if I'm passing a 0 out, I'm gonna actually put some negative charge or I'm gonna drain the charge off. And I'm going to put the logic 0 and the next set of gates. Ok? So I see I have a question that says, do I say that with at most, if I apply less than 0.7 volts, energy would be consumed. So what I'm saying is that if we drop the turn on voltage much closer to 0.7. you would end up leaking energy all the time. That's what I mean. So I don't I mean, if you go below 0.7, but I really mean is if you get very close to 0.7, we already actually leak plenty. And in fact, if you look at state of the art circuits, the leakage current is about 50% of the dynamic power consumption. So that's basically a sad state in life because it means when you think you've tried things off, you're still leaking about half the power that you would leak if you were completely on. And then I have a question is 10 represent of positive and negative charge? Yes, that's sort of what they represent. Kind of high level representation. The question them pull, what does it mean by pull up and pull down? It's just an expression to tell here that PMOS transistors are connected to positive charge. So they're being pulled up to something that's positive. And NMOS transistors are connected to zeros. So there being kind of pulled down toward ground, it's just an expression basically. Okay. Any other questions on this? Okay. That means that you guys are ready for the very first pole of this season. And I managed to learn that actually have to press Launch Pauling. But so you're lucky to be the second session. Here is the ball and let me see if you guys can figure out what is true for the cmos switches. I'll give you a one minute to answer. There are four possible answers. I know the poll has five. I just created the default ball. Or, or yeah, Do not true z please. Because DE doesn't exist is definitely incorrect. Okay. We got ten more seconds. Paws are not graded. Yeah. This is just for practice. It gives you a chance to think through with the material that we've covered and see if you figured it out. It's completely anonymous. So answer E is not going to help, but it is kind of funny bit. Okay, I think we got our answer. That can share results. And I can tell you that majority does role in this case, great work majority. The correct answer is C. Excellent work. Yeah, we kept pump percent of v. That's the jokester so of the class. And let's discuss why a majority is correct. First of all, those of you who answered a, you are correct that and thus does turn on with gate this correctly to logic one. Whoops, sorry. So here is a logic one. It turns on because when I put plus charge going to attract the electrons, and that's going to turn on my n MOS transistor. So I'll be able to pass 01. Ok. Pmos is an open search when gate is connected to logic one. And that is also true because if I put the logic one here and I have a situation in which I have a PMOS transistor, which looks like this. So here is my oxide here, source and drain. In this case, source and drain are positive. And they find out, put positive charge here, I'm gonna attract electrons down here. These electrons and positive charge well like each other or don't combine. There is no current flowing. So it is an open switch, which means that this is also true. Which means that C is true. And those of you who picked that when the price of the day, which I don't know what it is, they get a treat at my wish I could give you Tweets. And anybody that big D was clearly wrong, sorry. Okay. Yeah, that they would be nice if it was extra credit, but no extra credit for anonymous pores pole, sorry. I suggest put a little bowl of M and M sub big in them and them every time you get the correct answer, my seven year old would be super happy with that topic. And actually by deans are pretty happy with that too. Okay, now we're ready for our very first cmos circuit, which is the simplest circuit law ball. It's a not gate. So the not gate is drawn using a triangle with a little bubble. The bubble in front generally represents that we have the complimentary behavior or negative behavior. Made me talk about the NOT gate or an inverter and be represented as a bar. So doing the complement of the other possible way of representing it, this by writing a prime. Both of those are totally fine, fine for this class. So when you put a equal to 0 at the input, the output is exactly the opposite, it's one, and vice versa. If I put a equal to one, the output is a 0. Now do any of you know why there is a triangle as a symbol of an inverter. So I explained to you what the bubble is about, but does anybody know where triangle came from? No ideas. Ok, well I'll reveal the exciting news. It is actually kind of funny. And so the reason has to do with the original buffer. Has anybody heard of a buffer? It doesn't sound like it. So buffer is this really funny circuit, which actually is built out of at least two inverters put together back to back. So here's your a, here is your y, and here is your z. And let me actually label that didn't here, here is my y. Y is going to be connected to the next inverter. So here is my PC, and here's my n z, and here is the z output. First of all, in two inverters connected together is a little bit of a silly circuit, right? So let's talk about first what I would get if I have an input a of 0 and I pass it through two inverters. One is the output that I'm going to get Zara, correct? And if I have an input a of one and I pass it through two inverters. What is the output that I'm going to get? One, you guys are good. So why in the world where the Hebrew put two inverters together, that seems really crazy. But could I do instead of two inverters? Nothing, nothing will not work. Because nothing would mean that I have a here, I have x0 here, and there is nothing in-between. Yes, a wire. So wire would be the logical thing to do. We will not use any transistors, right? Well, it turns out there are many situations in which you actually need a buffer. Those situations are always related to when you really want circuits to run super fast. The way you get circuit to run super fast this by putting multiple inverters after each other and making them increasingly bigger. Because as they get bigger, they're able to push a lot more current. And as they can push more current, they get a lot faster. So buffer is one of the critical circuits that we use in design of any processor or any chip. And we'll talk a lot more about buffers a little bit later in the first third of the class. But the reason why I brought it up is that buffer, this symbol for buffer actually comes from an analog circuits. And the symbol is assemble for operational amplifier, which amplifies the input signal. And it turns out that this simple cmos inverter behaves similar to an amplifier. So it will take an input a, and it, it can amplify the input to the output y, except it also inverts that signal. So this is y or regional. Even people came up with the inverter symbol. They took this symbol for an operational amplifier, which was used for analog design. And they just added a little bubble to it to signify that the output is not the same as the inputs, that it's the opposite logic value of the input. Okay, so this was a little bit of history for you. Nothing that you really have to know other than the how buffer works logically. Let's actually talk about operation of the circuit itself. So let's get started with what happens when a is equal to 0. So when a is equal to 0, I'm going to have a 0 at the gates of P1. And then one, say if I have a 0 at the gate, p1, is that transistor on or off? So this is my P1 on or off. It is on. Correct? So that means I'm going to have a little bit of a resistance in here, right? And I'll be able to pass a logic one to the output. Okay? How about N transistor? Is n transistor on or off? But I have a logic one, logic 0, sorry, at the gate. So if I have a logic 0 here, then what? It is off. Correct? So this here is an open circuit which means that the logic 0 cannot pass. Is everybody okay, so far. Now let's take a look at what happens when I'm standing right here at my point y. This is where I'm at, right? So this is the same point. Why? There is a wire that connects the output of P1 and then one to the input of the next set of transistors. So if I'm standing here and I'm looking forward, what do I see? Notice what I look at. I look at two gates. Ok, so if I'm a little electron on that buyer and I'm looking, what I see is two gates. Those two gates are each a single capacitor. Ok. Now what happens if I put two capacitors in parallel? What is my total capacitance? Does anybody remember to see? Correct. So when I'm standing here, what I see is equivalent of 2i capacitances. Are we still on board? What I have, I'm standing here and looking down, I have this resistance. So effectively, if I'm connecting a logic one to the gates of the next stage of my inverter. The circuit that I have is a circuit that has a resistance connected to two capacitances. So this is what I'm seeing. Okay? So at this point, if I look at delay from point a, from my input, so when a changes from say, one to 0, here is my, a signal. And this is a logic one here is a logic 0, actual output to 0 them here. I want to now, whoops, sorry, I messed up. So here is logic one. Here is 0. What I want to know is how long does it take for my y to change up to a logic one? So there is some amount of time here that this stakes, and this time is called tau a to Y transition. Okay? So this is a 2Y. It's a change of time from input a. How long it takes for a change in signal to propagate because of this resistance and capacitance to y. And this turns out for this particular case to be equal to R times to see, because the capacitance is the same for both p and n-type transistor. There is no difference between those two transistors. Okay? So the total delay here is two RC. And that's the amount of time that it'll take for a signal to propagate from input, from input a to D output over here y. And it takes that long because y has to charge up these two capacitors that I have in my next set of transistors. Okay, any questions on this? It seems that we're OK so far. So because we're a four input 0, the output y is going to be what? One? Correct? Ok, so i, and the logic one here, that means I'm going to have a logic one on transistor P, Z, and I'm going to have a logic one transistor n, z. So if both of them have logic, one is peasy on or off when logic one is connected to it. So PC is off. How about n, z? Is it on or off? And Z is odd. And what will the final output b. What is z equal to o? Because n z is on, we're going to have a 0 coming out through some small resistance. The top will be an open circuit. So 0 comes out. You got. Now there was a question, and this is an excellent question. Why do we, why don't we count this capacitance here? We don't count this capacitance in the delay from input a to the output y. Recount it when we actually look at the circuits right before this. And let's say that here I have some input. I recount that when we look at delay for AI to input a, that's one capacitance B1 and capacitance of N1 come into play. So that is actually how we separate the delay. Got the same thing is going to happen here, or the z output. If I put another inverter here and let's say that I have an x output. I'm gonna have another delay here, which is going to be delay from z to x. And I'm going to have delay here, which is delay from y to z. On delay from y to z, I'm going to be concerned about resistances of P, z and then z and capacitance in here. So z is going to put the 0, z is going to be equal to 0, because y and the input is a one. And when y is a one, that means that the NMOS transistor is turned on. So 0 gets passed to the output. Ok, so we have, so far we have covered the case. When the input a is a 0. The next case is going to be the case when input a is a one. So let me get a different color so we can covered up with just the succumb over here. Okay. And I realize that things are getting a little messy on my beautiful drawing, so bear with me a little. Now, we're at this stage, we're going to be looking at when the input a is a one. So if a is equal to one, we have a situation in which we have one at the gate of P1 and one at the gate of n, n1. If I have one at the gate, the b1, this B1 on or off. So he's beam on, on or off. It is off. Okay. And the second is N1. If I have one at the gate of N1, is it on or off? So a logic one is at the gate of n, one is n, n1 on or off? It is on, correct? Ok. So this means that we have an open switch on top, but we now have small amount of resistance that's passing a 0 out. So what is my Y out with now? Exactly why out, but there's a 0. Excellent work. So why output this is 0. This means that now I have a 0 at the gate of N log at BZ n of n z. If I have a 0 at the gate of P z, is that on or off? It is. Correct. And if I have a 0 at the gate of n z, so here is my little r. And I'm passing a one out. If I have a 0 at the gate of N Z, is that on or off? That is off, correct. So this here is an open circuit. And what is my final output z? One? That is correct, excellent work. Now let's revisit our delay from a2 y. Notice we have delay here, a 2y. So in the case when a was originally a 0 and it now goes to one, we will have some delay. This delay here for which we need to account for when we transition a from 0 to one, it'll take a little while for y to transition from one to 0. So what happens in this case, because P1 is off and this transistor is on, when they look in the direction of the next stage, I still see the same two capacitors I saw before. There is no difference. So I still have to see over here. And I still have a single resistance except this time the resistance comes from the n transistor instead of p. So last time it was from the P transistor. This time it's from the n transistor. So notice that again, I have a situation in which I have resistance this time is and most connected to two capacitors, which are the two gate. There's, this gives me two C, this gives me a single large. So again, I have delay that is equal to two R c. So regardless of whether I have 0 to one or one to 0, I have the same delay between a and Y i. This delay is a function of resistance. So feeder PMOS transistor or n MOS transistor and capacitance of the gates of the next set of transistors that y is connected to and that it needs to put a charge on. So effectively, what's happening is we're taking charge from transistor P1 or n, n1. And we're moving that charge onto the gates of transistors p, z and then z. And that's exactly what I mean as looking in the direction off. I mean, I'm trying to pull literally electrons are positive charge from the previous stage, which is P1 and N1. And I'm trying to put it at the gates of peasy and then Z in order to then turn on one of those to get gates. Okay. Any other questions? I think there were some questions earlier that I didn't that, Sir. Why do we use and gate in serious if it delays the signal? So we're using, Have you need the both nMOS and pMOS transistor to control whether you gotta pass logic one or logic 0 at the output. Otherwise you wouldn't have a switch. And so you're kind of stuck with a delay. There is no choice. It, the only alternative you have is using a wire, but in that case you have no control because the a 01 would just pass through. So nMOS and pMOS transistors, they don't really flipped the charge. What they do is when there are turned on, they just passed the charge through. So let me go back to, whoops, just a sec. Let me go back to the previous slide here. Ok. So when we turn it on, then this is an example where NMOS transistor is turned on. What we're doing is we're moving this negative charge. We're moving it through. So this negative charge is moving to the next transistor. So let's imagine that the next set of transistors are also going to be a PMOS and NMOS. What I'm doing is I'm putting this negative charge at the gates of those transistors. Okay? And it's going to be fleck to, because from, whoops, let me move back here. So when I put just a sec, so, but I put the logic one at the input a. I'm gonna go to my two inverters. Give me a second to get, I've been back. Okay, so if I put the logic one and this inverter, that is gonna cause my n must to turn on. So I'm going to get the logic 0 here. And that logic 0 is going to cause the PMOS to turn on. So that's going to put the logic one out here. So basically, what it's doing is it's passing alternating positive and negative charge. When you pass, when you put logic one at the input, it's passing negative charge. So that's how we get that logic 0 at the next input. When you put a negative charge at the input that is going to pass the positive charge to the output. And that has to do with what turns on PMOS versus n MOS transistors. And in case of output, see, the output is going to be determined depending on what is the input y. So either PMOS or NMOS transistor will determine depending on what y is. Okay? So the inverter doesn't change the thing that flows through to why? I don't think I understand that question. So if you can reward the question, I'll answer it. So the other question is, is the delay only there when the input to the logic gate change us? Yes. Delay will happen only when there is a change to the input. Otherwise the signal is stable. A deed or logic 0 and logic one, you don't see a change. So delay, we're going to care about only when there is a change in the input signal. That is a very good question. Yep, and these delays are additive. So we saw so far, what is the delay from a to Y? And you figured out that this delay here is T2. To start writing two RC. That's the delay from eight to y. But the same delay also happens from y to z. It's also to RC. So my buffer delay is going to be for RC Because I add them together. And the units that we use for delay or seconds. Seconds, just like any other delay versus frequency. So delay actually forms the basis of how we figure out performance in our circuits. So delay tau is in seconds, but frequency is one over this tau and that is in hertz. So what is the typical frequency off today's processors? When you buy, say, a new laptop or a new cell phone book kind of frequency will they run at a gigahertz is super fast, usually closer to 2.5 to maybe four gigahertz. Gigahertz, you needs water cooling. Yeah. So one over 2.5 gigahertz tells you what is the lowest delay in the processor that you are using. Somebody asked, what is the purpose of buffer? Purpose of buffer is to get the signal to run faster. And you do it by actually changing the resistance in the signal. And that I can talk about a little more, but I talk about buffers. Then I have a question. Why is the delay between capacitor's added together and resistance delay multiplied together. So capacitors are added together for the simple reason, the whoops, because they are in parallel. So if you look at these two gates right here, the peasy and NC there in parallel with each other. So we need two capacitors in parallel. We add the capacitance. This total capacitance is equivalent to two capacitors to see. And to that what we have connected this the resistance, either the PMOS resistance R or the n MOS resistance R. So the delay estimate of delay, I should say, is when you multiply the total resistance and total capacitance on the path. Okay. So any other questions? I think I answered all the questions, but if and the question is, is RC delay from solving the RC circuit time constant? That's correct, but I'm not gonna get into those details. It's just an approximation for the lake to help everybody understand how the delay works in circuits. And purpose of the buffer is to get stronger logic value out. So lodgings stronger logic 0 and logic one. And I think I just mentioned to you in the previous slide that the en-masse does not pass ones well, and PMOS does not pass zeros well. So sometimes we use a buffer to kind of get a situation in which an NMOS doesn't pass so well. To get it back to the original full-blown BAD volt, instead of some lower value that en-masse caused in the path. The other reason why you use a buffer is to increase the speed when you're trying to pass the signal to a much bigger capacitor for this example of that would be at the output of the chip. So when you connect the pins of the chip to the board, you have huge amount of capacitance. So you would use multiple buffers to get the signal to be stronger and therefore to charge up faster that huge capacitor. But this is something you don't have to know. Okay? So we're moving on to our very next gate, the super exciting NAND gate. So and then gate, the symbol we use is the symbol for the AND gate. So this is and read the little bubble which tells us that there is the inversion that's happening. You can also represented in this way. I'm fine with that as well. Nand gate will give a logic one output if there, there is a 0 at any one of the inputs. And it gives a 0 if both inputs are logic one. So let's fill out this table. By starting at 11 input. So if both a and B are logic one, what will happen to my N1 and N2? Are N1 and N2 on or off. Yep. Good job. Both of them are on. So that means that the, this, I'm gonna have actually two resistors, right? And what is the equivalent resistance of two resistors in series? It's a sum. So too are excellent. Okay? And that also means that I should be passing a logic 0 to the output. Now let's double check what happens if I put logic wanted. Inputs of b1 and b2 are P1 and P2 on or off. Correct? They're off. So these guys are both open circuit. So that means that the output, it's going to be a logic. What 01, what happens at y? It's a Zara, correct? Exactly. My guy. So, so far so good. No problem. Okay, now we're gonna move on to the next version. But I'm going to first change my ink color and I'm gonna make it nice and red. Okay? So let's do this combination now. And a is equal to one. So that means I have a one here. B is equal to 0. So that means I have a 0 here. Okay? So let's do first the n circuit. On, the end circuit is N1 on or off. And one is on. How about N two? Is it on or off? N2 is off. So in this case I have a situation that looks like this. I have a resistor and then I have an open switch. Can I pass something through this kind of a circuit? No, exactly. So there is no connection to ground. And let's actually think for a second about this situation. So if I have the opposite 01, I would have an open switch on top and a resistor here. Can I pass anything through this? So it will be this situation, right? Can I pass anything still? No. So this is still open. Okay. So let's now go back to my top. So if I have a logic one at P1 is on or off. It is off, correct? If I have a logic 0 at B2, is that on or off? That is on, correct. So that means that I have a little bit of resistance here. And can I pass a logic one out now? So here I have an open circuit, but over here I have a resistor. Can I pass a logic one out? Yes, that is correct. So this is a situation where I have this type of situation. Here is my logic one. And Yes, because I have a path to the output, I can pass a logic one out. This means that the output y is a one. The same thing happens in this case, except we switch who is on and who is o. Notice that total resistance here is our, there's only a single Are. You guys see not. So over here we had two r. But when we have a combination, 0-1, 1-0, there's only a single R resistance. Ok? And you guessed it, the last piece is going to be the most exciting as always. And that is when we have two zeros at the input. So I have 0 here and zeros up here. Let's first do the end part. So if I have zeros at, then n1 and n2 are N1N2 on or off. Both of them are off. So that means that I have to open switches. It's an open circuit. 0 cannot pass through gap. And I saw another question is why Zara or nothing for the input 11 we are getting there. Give me a minute. So if we have zeros at N1 and N2, then it's an open circuit down below. 0 cannot go out. Now let's, let's look at what happens at the top. If I have zeros at p1 and p2, are they on or off? P1 and p2 are both on. So that means that I'm going to have resistor R here, and now we'll have resistor R over here. So effectively what I'll have is something that looks like this. Connected to the output y. If I have two resistors in parallel, what is my total resistance? Yeah, exactly. It's r divided by two. And can I pass a one? What out? Yes, I can pass a logic one. Okay? So notice that there's a pretty wide variation in resistance that becomes super important when we look at delay. Any questions on how this operates before we start talking about delay. So in this case, when we have two inputs equal to 0-0, right here in the blue case. In that case, P1 and P2 determine the output in the case when at least one input is a 0. Then again, one of the p transistors determines the output when both inputs are one. And that was my green case. In that case, n transistors determine the output. Okay. Any other questions on this? All right, so let's move on to the next one. And here we're going to start talking a little bit about the lake. So, so far this spent quite a bit of time talking about what happens with these transistors. Now notice that I changed the name. I should, I should not have done that, I'm sorry. But now we have an x here. And x is going to be logic one for all situations other than when both inputs are logic one. Okay? In that case it's 0. And what I would like to do here is walk us through the delay. So let's start first with the 00 case, in which case I have two resistors up here, r and r. And this is at this point x. So I'm going to be looking at delay from input a to the point x. Now notice that at this point the X, what I'm doing is I'm moving charge from a logic one. So moving positive charge and I'm putting it on these gates over here. Okay? So these gates over here, I'm charging up the equivalent of two capacitors, which are connected in parallel. So these two capacitors look like this. This is a capacitor off, I'm going to call this p y and then y capacitor P y. And this is a capacitor of NY. And here is my point X. On the other side of that point x, I have in the, in the blue case, I'm going to have two resistors. Sala have resistor one and resistor two connected in parallel. So I effectively have r divided by two. That's my effective resistance. Connected to here is my point X connected to, to see. When I multiply these together, I get delay, that is, sorry, that is equal to r c because r divided by two times to see the delay would be equal to two RC. That's the delayed 2x. Is everybody okay on this so far? So this first gate over here is a NAND gate. This gate over here is what? Not gate. Correct. So when I put the two together and up with a single AND gate, now notice how many transistors are in the NAND gate. I have to p-type and 2n type. So four transistors. How many are in the inverter? One P1 then, so two transistors. So and gate actually has six transistors. And gate, this kind of expensive. And this is exactly how AND gate is made. So, and this is why we like to talk about universal gates. And now I'll get to that a little bit later. I want to first cover all the delay. So is everybody okay with this idea that we have two resistors in parallel. When we have combinations 000 at a and B, we will have two Rs in parallel connected to two capacitors in parallel. So this is resistor of p-type. And here is the capacitor from P, And here's a capacitor of n. And since they're the same, then this is r divided by two times two c, which gives us RC delay. Okay? So I'm going to delete what's on this side because I'm going to need the space a little bit later. So let's move on to the next situation. And the next one, I would like to go back to my case of 11. So let's do the green case, and that's the case of 11. So we'll be doing this case. Okay? So now if I have 11 case at a and B, I have a situation in which I have ones at N1 and N2, which means that then n1 and n2 are on. And this means that I'm going to have two resistors connected in series. So output x is going to be a logic 0. We went through that on the last slide. Right? Everybody's okay so far. Now how much persistence do I have in this case? If I have two resistors in series, what is my total resistance? Two are, that's correct. Okay, so, so far so good. Now, if I'm looking at the same point x, I'm standing here looking this way. What I'm doing is I'm moving negative charge onto the gates of these next two transistors. The transistor. P Y and n y. I'm moving negative charge through the n one and n two transistors and depositing it on the gates of p, y and then y. So effectively I have two capacitors again that are in parallel. This is cp ride and see NY. And these two are in parallel. So the total capacitance would be equal to what? It would be equal to two c. So the total delay here is for RC. So let's write that down for R c. Notice a huge difference between this situation and inputs are 00. And situation when the inputs are 1100 is four times faster than 11. Crazy, hell, it's very, very unbalanced. So I see I have a question why transistors will be converted to resistors, a NAND gate, while there will be converted to capacitors and not gate. That's a great questions and that has to do with what is going on. So in the NAND gate, what we're doing is we're turning on transistors. So those transistors now behave as resisters in there passing charge from source to drain. That drain is actually connected to the gate. And gate is the capacitor off the next transistor. And in fact, in our case, x is connected to two transistors, two p y and then y. It's connected to gates of P1. And why this is why we see the capacitance of that side. Now when we do the next stage, when we look at the delay from x to y, we will be looking at resistance and PY and NY and capacitance up whatever the y point is connected to. But before we do that, I would like to do the 01 combination. So we covered the delay for that. So let's switch color back to red so we can do our red combination, which is guide to be fully symmetric. It doesn't matter if we look at 0-1 or 1-0 combination. I see that I have a few more questions. First question is, do we try to mitigate that delay difference by changing our and see the answer is no. We don't. What actually happens is we look at average delay and we'll talk more about that later. Because c of n, why even if charged doesn't pass through 0 doesn't turn on. And why? We do count the capacitance because the charge has to be deposited on that capacitor. So it's got to take energy to deposit charge on the capacitor, even though the transistor is not going to turn on by the capacitor will still hold the charge. And somebody. We'll talk about the late 2x. So the last question I'll address in a little bit. Okay, so let's move on to the combination 0-1. 0-1 combination right here means that I'm going to have a b 0, and b is going to be a one. So let's kind of walk through this. If a is a 0, that means that my transistor P1 is going to be on or off. He pays. Zara is P1 on or off? P1 is on. And that means that p1 has resistance R on it. How about B2? Is it on or off? So P2 is connected to one beat turns off. So that means that I have an open circuit on BTO. N1. N1 has a 0 connected to it. Is it on or off? It is off. And then n2 has a one connected to it. Is it the owner of that one is on. So I would have a little resistor here, but I have an open circuit up here. So there is nothing that can pass through this way. This is an open circuit. So the only way that I can charge up the next two gates is through logic one, through my P one circuit. And in this case I'm going to bitch putting positive charge on PY and n y. So I'm going to have a situation in which I have a single R. This one comes from p1. And that single R is again going to be connected to the two capacitors, c, p, y, c and y, which is equivalent to two C, four total delay off our times 2i or two, or C delay. Okay? So, and in fact the other combination is symmetric. The differences is that instead of B1 being on and we'll, we'll have P2 on. But everything else in the analysis stays the same. We get. So soft part, we see that the range of delay is a factor of four. An average is approximately two RC. So let's now look at what happens for the next stage of delay. So now we're interested in delay from X to Y. Because in order to know the delay of an end gate, this in fact is the delay open and now we want to know delay of AMT. Okay? What we will do is we would ask ourselves what is why connected to? And generally, y will always be connected to two transistors. It may not be inverter necessarily, but for simplicity, we're going to pretend it's an inverter. Okay, and I'm going to call this final output Z. And they always actually have, each output will always be connected to two transistors, one pMOS and one NMOS transistor. And pretty much all of the instances in this class, there is an exception and I will tell you when that exception happens. But for right now, you can assume that you're always going to have a situation that every input is connected to two gates, one p-type and one AND gate. And this is where the complementarity, the always comes from. Okay? So let's look at our situation here. Now notice because we have X connected to y, n in between x and y is a simple inverter. We really just need to look at two situations. We need to look at the situation where we have one edX. And we need to look at the situation in which we have 0 at x. So let's first start with one, add dx if x is equal to one, well, PY be turned on. So if x is equal to one, this Buh-bye on or off. So p of i is going to be off. How about NY? Is NY on or off and wise on? So this is an open circuit. Down here. We have a resistor and we have passed, we're moving charge, negative charge or a logic 0 up to the next set of gates. So what is happening in this case, we have a resistor which is from NY, connected again to two capacitors. This dual capacitors are the capacitance of easy and the capacitance of n z. So here is my P z, and here is my n z. Ok? So effectively what I have is r times 2i. That's my delay to RC. And that is the case in all of these cases. It pretty much doesn't matter because in all of these cases we're going to have the output of 0 on y. So the total delay here in the first case is going to be what? So in case when a and B are both 0, what is my total delay open-end gate. Sorry, I mislabeled. This is an inverter delay of AND gate. You add RC plus 2A C for three RC. Okay? Excellent. The next one, if either m inputs are 0-1 or 1-0, one is by total delay of an AND gate for RC, correct. Okay, so let's look a little better. It's still imbalance, but not quite as Terribly unbalanced. So I'd like to do the last piece next, and that is the green. Version where we have both inputs being equal to one. So let's get back to that. If both the inputs are equal to one originally, then x will be equal to 0. So that means that that will have a 0 at pi and n y. So if there's a 0 at transistor, PY is transistor on or off. It is on. And how about N? Why is it the other off? If there's a 0 on it, that is off. So we have a situation where N is off, PI is on. And what we're doing is we have resistance that is charging up capacitors, but now it's positive charge. It's still the same two capacitors. So there is no difference. Not on the where to draw it because I'm kind of out of space. So here is my R resistances is of P y. And it's connected to the two capacitors, which are c n, z and c of p z. For the total, again, our two RC delay. So nothing new. It shouldn't be surprising because this is an inverter. And the output of y is going to be one because we're now moving logic one out. So what is the total delay of a NAND gate if delay 2x is 4x RC and delayed too wise to RC. The total delay is going to be how much for the situation when we have 11, exactly six RC. Okay. And now you guys know all you need to know about NAND gate inverter and also about and give it to, you know, how to do the delay, you know how to estimate delay of both inverter NAND gate and NAND gate. For homework, you'll get to do the NOR gate delay. And you will analyze the OR gate design. And let me see the questions. Is it possible that there is no more transistors after not gate? Yes, it is possible. But what's going to happen then is you're still gonna have capacitance. And the reasons why that's going to happen is the only time this occurs in a circuit is when you are connected. When you connect the last piece of your circuit to append on your chip. So a chip typically will have a bunch of pins on it. I don't know their egos. So here is my super simple chip that has only six pins. This beam stent don't have huge capacitance. That capacitance is hundreds of times bigger than capacitance of a normal transistor, which would mean that the delay would be super slow if you use just normal, smallest possible size transistors. And this is why we use buffers, views actually buffered to speed up. The charging up that humungous pin that's at the output. And then I have a question of what happens if p, y and then y we're above on. That is an excellent question. And it's a disaster. You have a fire in your circuit. Literally smoke happens, so that should never happen. Don't do it. If you do a side of 140, I'll have you guys started talking about Verilog yes. Yet? Yes, assign Verilog. Connecting one to 0 will result in X output, which basically means fire. So if you see excess, that's bad news for you. You're really messed up. For hallmark. Somebody says they know this diagram is drawn a bit differently. Is the output coming out from the bottom of PB? That's a good question. And let me actually get the homework up so I can see what you're talking about. Just the second. Gotta get the where is it? Now? Don't remember where. Just the minute I just need to open it. Because my homework. There it goes. Okay. Let me share the screen so you guys can see it. There we go. Okay, so the question was, so right here, x is connected to the output, the BB, and outputs of NA and NB Down here you have ground up here yet VDD. So it's a similar thing to what we just did in class. The differences is that that different arrangement of p and n-type transistors. And this here is an inverter. So same, exactly the same thing that we did in class, the differences in the first stage. Ok. So does that answer the question regarding homework? And if you look down here, you have exactly the same table where you need to actually input what is on, what is off, and what is the final output. Notice that then part B, you need to figure out the delay and you should do it the same way we did it in class today. Okay. The rest of these questions we're going to cover on Tuesday. So we're actually very close to being done the dot. Okay. Any other questions? And then there was a question If p y and then y were both off. So in this example, if p x and then x are both off, it means that y is disconnected. So nothing is at the output. It's like an open switch. Okay. I think that pretty much should Kerberos, I want to thank you guys for great questions and great interaction. Makes my life so much easier. It's a little hard to be teaching to an empty room. And so I really appreciate your questions and your comments. And I wish you all the best on problem one, on homework. By all means come visit us during office hours and as I said, I'll cover the rest of the homework questions on Tuesday. Thank you all.