WEBVTT

1
00:00:00.900 --> 00:00:03.899
Miles E Jones: Okay let's get started um.

2
00:00:05.609 --> 00:00:08.490
Miles E Jones: Anybody have any questions or comments, before we start.

3
00:00:16.590 --> 00:00:17.520
Miles E Jones: Did you all see that.

4
00:00:19.470 --> 00:00:21.510
Miles E Jones: RON will Ronald made a.

5
00:00:22.860 --> 00:00:29.340
Miles E Jones: sort of like a not like a practice test, but it was a a way that you can.

6
00:00:31.260 --> 00:00:39.450
Miles E Jones: Take a grade scope online assignment just to kind of see what it's like So if you wanted to see what it's like before we actually did the real thing.

7
00:00:44.310 --> 00:00:44.760
Miles E Jones: Sorry.

8
00:00:45.870 --> 00:00:50.370
Miles E Jones: All right, let's go so today we're going to talk about ranking.

9
00:00:51.450 --> 00:00:52.710
Miles E Jones: One of my favorite.

10
00:00:54.630 --> 00:00:58.290
Miles E Jones: topics that we do in this class is.

11
00:00:59.310 --> 00:01:01.380
Miles E Jones: is really a powerful.

12
00:01:03.810 --> 00:01:05.490
Miles E Jones: idea and.

13
00:01:06.780 --> 00:01:08.010
Miles E Jones: i'm going to try to.

14
00:01:10.260 --> 00:01:18.060
Miles E Jones: revisit it when we do probability, and maybe you'll see kind of where it comes in, to play and why it's important and.

15
00:01:19.230 --> 00:01:20.160
Miles E Jones: Why it's Nice.

16
00:01:21.540 --> 00:01:29.850
Miles E Jones: But in order to motivate it we're going to what are we doing example of different ways to encode the same data okay so.

17
00:01:31.230 --> 00:01:48.030
Miles E Jones: i'm going to talk about a particular type of data and we're going to try to figure out what's the best way to encode it what's the best way to store it and then we're going to get to down to something called the theoretically optimal encoding.

18
00:01:50.070 --> 00:02:01.890
Miles E Jones: And that involves ranking and and ranking fixed density binary strings okay So what is this same data we're going to play a game called Colonel blotto, this is a game that.

19
00:02:04.080 --> 00:02:12.360
Miles E Jones: that one of the Grad students play when I was a Grad student and it's it's not a game that's going to be.

20
00:02:14.190 --> 00:02:15.600
Miles E Jones: it's not a very hard game.

21
00:02:16.740 --> 00:02:20.220
Miles E Jones: But the strategy is a little.

22
00:02:21.360 --> 00:02:34.170
Miles E Jones: interesting if you think about it, and it can change depending on who you're playing with it is sort of more in the realm of game theory and we're not going to go into that part of the game.

23
00:02:36.090 --> 00:02:38.070
Miles E Jones: it's kind of like rock paper scissors yeah.

24
00:02:40.140 --> 00:02:46.440
Miles E Jones: The re there's a few reasons that I wanted to play the game one, because I think it does illuminate kind of.

25
00:02:47.460 --> 00:02:52.260
Miles E Jones: Ideas about discrete objects and mathematical objects.

26
00:02:53.970 --> 00:03:00.150
Miles E Jones: I think it's kind of interesting to see the results and it's sort of fun to to play around with this data.

27
00:03:02.370 --> 00:03:14.070
Miles E Jones: But the main reason that I want to talk about it is, I want to artificially make something important Okay, so if we kind of get into this game and we find it important than we're we're.

28
00:03:14.820 --> 00:03:28.830
Miles E Jones: You know, then it's important to figure out the best way to store the data because it's something that is important what's important in this world it's all kind of arbitrary right it kind of all depends on what you're into or what.

29
00:03:29.910 --> 00:03:31.260
Miles E Jones: What most people are into.

30
00:03:32.280 --> 00:03:41.610
Miles E Jones: Right, like some people in the chat who would have known that game stop would would you know shoot up the stock, you know the stock will shoot up.

31
00:03:42.330 --> 00:03:59.640
Miles E Jones: Why is it important, you know it's it's important because a bunch of people found it to be important and they you know they made it important, so it's kind of like that, with this example is Colonel blotto important no are we going to pretend like it is yeah.

32
00:04:07.320 --> 00:04:13.110
Miles E Jones: Okay, so to illustrate the different ways to encode the same object will use the example of Colonel blotto.

33
00:04:14.070 --> 00:04:18.600
Miles E Jones: How complicated are the encoding decoding algorithms and I want you to think about these.

34
00:04:19.440 --> 00:04:26.010
Miles E Jones: How many bits are required and here's kind of a question that we're going to be going back and forth, is it.

35
00:04:26.670 --> 00:04:41.250
Miles E Jones: Can you still kind of do appropriate logic and arithmetic on the encoded object, or is it necessary for you to decode it in order to do that kind of stuff and is that important to you, maybe it is maybe it's not.

36
00:04:43.680 --> 00:04:53.580
Miles E Jones: Okay, so Colonel blotto is an exercise in game theory, it can be modeled as a game where every player sets up how they would guard 10 labeled castles.

37
00:04:56.010 --> 00:05:04.830
Miles E Jones: With 100 indistinguishable nights a battle between two players consists of comparing the number of nights each player had for each castle.

38
00:05:05.400 --> 00:05:16.200
Miles E Jones: For each cancel the player with the higher number of nights wins that Castle the player who wins more castles wins the battle if they both win the same amount of castles then it's a time.

39
00:05:17.640 --> 00:05:24.540
Miles E Jones: Okay, so that's that's how it works, but let's see an example Okay, so we have the green player and the red player.

40
00:05:26.190 --> 00:05:33.360
Miles E Jones: So remember you're you're placing 100 indistinguishable nights into 10 castles sound familiar.

41
00:05:38.820 --> 00:05:40.740
Miles E Jones: So 100.

42
00:05:41.880 --> 00:05:43.200
Miles E Jones: indistinguishable Nice.

43
00:05:49.560 --> 00:05:58.950
Miles E Jones: And you're allowed to leave caps castles empty, if you want you're allowed to put all 100 nights into one Castle that's not a very good strategy, as you will you'll kind of figure out.

44
00:06:00.090 --> 00:06:06.060
Miles E Jones: Okay, so what you do each of the castles are numbered right 12345 up to it up to 10.

45
00:06:08.910 --> 00:06:14.340
Miles E Jones: And so, how do you battle these two people well you just compare their castles so.

46
00:06:15.690 --> 00:06:37.260
Miles E Jones: Green wins Castle 115 is bigger than eight so green wins Castle to 20 is bigger than six so green wins castles 313 is bigger than five they'll do like this, so read wins Castle five red wins Castle, four and five sign Castle six goes to breen seven.

47
00:06:39.060 --> 00:06:40.110
Miles E Jones: Eight goes to read.

48
00:06:41.550 --> 00:06:45.660
Miles E Jones: Nine goes to read and then there's a tie so nobody wins that castle.

49
00:06:46.770 --> 00:06:51.390
Miles E Jones: Okay, so the score is five to four.

50
00:06:53.640 --> 00:06:55.020
Miles E Jones: Excuse me so greenwood when.

51
00:06:56.160 --> 00:07:02.430
Miles E Jones: Okay, if you look on the outside, there is a Google form that you can fill out if you play.

52
00:07:07.290 --> 00:07:09.690
Miles E Jones: You will earn.

53
00:07:11.340 --> 00:07:13.230
Miles E Jones: One review quiz point.

54
00:07:15.330 --> 00:07:22.020
Miles E Jones: If you're the top five you will win an additional review quiz point.

55
00:07:23.970 --> 00:07:32.160
Miles E Jones: And if you a successfully encode your arrangement you'll get another review quiz point.

56
00:07:46.320 --> 00:07:57.450
Miles E Jones: Okay it's not supposed to be something that's that's a it's supposed to be an optional game you don't have to play if you don't want to when I post the scores i'll post them completely anonymously.

57
00:07:59.250 --> 00:08:06.780
Miles E Jones: Only I will have the data and i'll give you your review quiz points and stuff anonymously so don't worry about that.

58
00:08:07.680 --> 00:08:18.510
Miles E Jones: was just kind of like it's more of like an experiment and to see kind of what kind of strategies you all come up with, because you know certain strategies work for certain classes and different.

59
00:08:21.390 --> 00:08:24.120
Miles E Jones: yeah okay any questions about that.

60
00:08:30.720 --> 00:08:31.710
Miles E Jones: it's optional.

61
00:08:36.330 --> 00:08:41.310
Miles E Jones: And we'll play one more time after right before the the.

62
00:08:42.630 --> 00:08:45.870
Miles E Jones: The the arrangements are do Monday night.

63
00:08:50.070 --> 00:08:50.550
midnight.

64
00:08:53.760 --> 00:09:05.160
Miles E Jones: Okay, so get them in before then, and then i'll post the scores, the following Friday will probably play one more time after the second midterm too so maybe you'll learn from.

65
00:09:05.820 --> 00:09:20.790
Miles E Jones: kind of the way it went but maybe everybody else will also learn from how it went so it's kind of like this thing, where you sort of try to guess what your opponent, is going to do, but their opponents trying to guess what you're going to do so it's this whole kind of thing.

66
00:09:22.650 --> 00:09:26.640
Miles E Jones: I guess the way it works is i'm going to I have a I have a script that will.

67
00:09:27.660 --> 00:09:36.390
Miles E Jones: That will pit everybody against everybody else, and then whoever wins the most battles wins the whole thing okay um so Colonel blah.

68
00:09:37.860 --> 00:09:47.730
Miles E Jones: You are all going or not you are all but whoever wants to play is going to give me their arrangement and the end the format of their arrangement is going to come in this.

69
00:09:48.000 --> 00:10:07.020
Miles E Jones: Google form i'm going to download it into a spreadsheet and that's the format that i'm going to use is that the most efficient way to store it is there a way to crunch down the number of bits per arrangement down even farther that's kind of what we're going to do today.

70
00:10:08.520 --> 00:10:18.780
Miles E Jones: Okay, each night arrangement consists of an arrangement of 10 100 indistinguishable nice into 10 label castles let's suppose there's 150 students in the class and.

71
00:10:20.130 --> 00:10:43.350
Miles E Jones: Everybody plays how much memory is needed to uniquely identify each of the night arrangements Okay, based on that let's say that my computer is this like full of stuff and I only have one kilobyte of memory left, is it possible to store all 159.

72
00:10:48.090 --> 00:10:49.710
Miles E Jones: In that one kilobyte.

73
00:10:56.370 --> 00:10:57.540
Miles E Jones: Anybody say no.

74
00:10:59.370 --> 00:11:05.190
Miles E Jones: Anybody say depends, how you store it anybody say it's impossible, so what we're going to talk about.

75
00:11:07.110 --> 00:11:08.790
Miles E Jones: Okay, so version one.

76
00:11:09.870 --> 00:11:16.560
Miles E Jones: Maybe I guess version zero would be just keep it in the csv and store it that way.

77
00:11:17.580 --> 00:11:19.890
Miles E Jones: I didn't do any calculations on that, but.

78
00:11:22.140 --> 00:11:29.670
Miles E Jones: I don't know exactly how long that would be okay so version, one would be list of numbers, using ascii now for each.

79
00:11:33.480 --> 00:11:34.380
Miles E Jones: For each night.

80
00:11:35.460 --> 00:11:35.880
Miles E Jones: Right.

81
00:11:38.970 --> 00:11:47.430
Miles E Jones: You can store a two digit number using eight bit ascii right, so this example would be.

82
00:11:50.100 --> 00:11:56.850
Miles E Jones: I would make this 0500 attend a 520 10 and 00.

83
00:11:57.990 --> 00:11:59.580
Miles E Jones: So how many bits would this take.

84
00:12:00.660 --> 00:12:02.610
Miles E Jones: Well, you have 10 nights.

85
00:12:04.530 --> 00:12:06.390
Miles E Jones: Right two digits each.

86
00:12:09.540 --> 00:12:10.920
Miles E Jones: and eight.

87
00:12:12.180 --> 00:12:13.680
Miles E Jones: bits per digit.

88
00:12:18.510 --> 00:12:30.960
Miles E Jones: Okay, so each night arrangement is 160 and so, if I only have one kilobyte which is 8192 bits I can really only store if the one night arrangements in one kilobyte.

89
00:12:34.020 --> 00:12:44.130
Miles E Jones: Okay does anybody see any problems with this is this going to work for all of those different night arrangements are there any night arrangements that this.

90
00:12:46.170 --> 00:12:48.270
Miles E Jones: encoding can't handle.

91
00:12:49.740 --> 00:12:51.060
Miles E Jones: Right exactly so.

92
00:12:52.830 --> 00:12:58.020
Miles E Jones: This is bad for when.

93
00:12:59.250 --> 00:13:00.570
Miles E Jones: All 100.

94
00:13:02.790 --> 00:13:06.450
Miles E Jones: nights are in one castle.

95
00:13:08.520 --> 00:13:10.680
Miles E Jones: It does anybody have a way around this.

96
00:13:18.060 --> 00:13:22.740
Miles E Jones: minus one sure right, you can kind of since we're using ascii.

97
00:13:24.330 --> 00:13:40.200
Miles E Jones: Instead of 100 instead of instead of writing 100 you could write it as like hulu hundred or I don't know right just any to to character code for 100 and that would work right.

98
00:13:43.740 --> 00:13:47.070
Miles E Jones: delete the 100 because they're definitely going to lose sure sure.

99
00:13:48.810 --> 00:13:53.070
Miles E Jones: Use hex so that's what we're going to do next so.

100
00:13:54.720 --> 00:14:02.970
Miles E Jones: version one is 160 bits I can only hold 51 I have 150 students, so this is not good okay version.

101
00:14:04.170 --> 00:14:04.680
Miles E Jones: To.

102
00:14:06.300 --> 00:14:08.910
Miles E Jones: version two I thought I made this version 1.5.

103
00:14:11.010 --> 00:14:11.400
Miles E Jones: And yeah.

104
00:14:13.050 --> 00:14:15.180
Miles E Jones: So do I actually need.

105
00:14:16.830 --> 00:14:26.520
Miles E Jones: All eight bit ascii all i'm doing is encoding digits right so remember that remember B, C D is a.

106
00:14:28.950 --> 00:14:30.030
Miles E Jones: Is an encoding.

107
00:14:35.130 --> 00:14:43.860
Miles E Jones: Okay sorry is an encoding scheme where you encode every digit using only four bits each right.

108
00:14:45.600 --> 00:14:48.510
Miles E Jones: Do you need the entire ascii code, no.

109
00:14:50.010 --> 00:14:54.120
Miles E Jones: You only need four bits.

110
00:14:55.500 --> 00:14:56.940
Miles E Jones: per digit.

111
00:14:58.890 --> 00:15:05.130
Miles E Jones: Right, so this is going to take oh yeah I did call it 1.5 and let me change that here.

112
00:15:08.220 --> 00:15:13.500
Miles E Jones: So this was going to be four bits per digit.

113
00:15:15.360 --> 00:15:16.320
Miles E Jones: two.

114
00:15:18.300 --> 00:15:18.960
Miles E Jones: digits.

115
00:15:22.530 --> 00:15:23.220
Miles E Jones: Her.

116
00:15:24.690 --> 00:15:25.290
Miles E Jones: castle.

117
00:15:28.830 --> 00:15:29.700
Miles E Jones: 10 castles.

118
00:15:31.560 --> 00:15:34.410
Miles E Jones: So now, I have at bits per night i've cut it in half.

119
00:15:35.790 --> 00:15:38.250
Miles E Jones: Right, so now, I can hold twice as much.

120
00:15:40.830 --> 00:15:44.790
Miles E Jones: How do you handle.

121
00:15:46.740 --> 00:15:47.490
Miles E Jones: 100.

122
00:15:48.570 --> 00:15:50.430
Miles E Jones: How do you handle the case where there's 100.

123
00:15:52.230 --> 00:16:09.870
Miles E Jones: Okay, good us to have the forbidden things so that this there's only 10 of the 16 possible codes with using four bits, so there are six extra things that you could use right, so the forbidden.

124
00:16:12.210 --> 00:16:13.530
Miles E Jones: are going to be.

125
00:16:15.150 --> 00:16:35.460
Miles E Jones: 1010101111001101 and 1110 and 1111 do you only want to use one of them up, you should probably use to write because it's important to us, too, because if you.

126
00:16:37.080 --> 00:16:53.160
Miles E Jones: If they bury in my and then you're going to need the commas right, so you could say 100 is equal to I don't know 11111111 or something like that, and that will that will take care of it.

127
00:16:55.530 --> 00:16:58.830
Miles E Jones: Okay questions so everybody, we can we're able to do it.

128
00:17:01.980 --> 00:17:10.200
Miles E Jones: 10100000 could decode nicely to 100 that's true yeah that's that's probably better.

129
00:17:11.490 --> 00:17:17.550
Miles E Jones: Because 1010 is 10 and then 0000 is zero.

130
00:17:19.260 --> 00:17:19.620
Right.

131
00:17:22.590 --> 00:17:22.920
yeah.

132
00:17:24.180 --> 00:17:34.650
Miles E Jones: yeah So these are the kind of things that I want you to start thinking about is you know what what makes it better what makes it worse, certainly, this is better than the ascii one right.

133
00:17:36.120 --> 00:17:42.090
Miles E Jones: In my opinion, you can hold twice as much, and you can still do arithmetic on your.

134
00:17:44.550 --> 00:17:45.210
castles.

135
00:17:48.390 --> 00:17:49.620
Miles E Jones: Okay version two.

136
00:17:51.900 --> 00:17:55.770
Miles E Jones: Well, we know that each number is in between zero and 100.

137
00:17:59.460 --> 00:18:03.510
Miles E Jones: So we only need seven bits per number, where do I get that seven from.

138
00:18:18.420 --> 00:18:23.880
Miles E Jones: Everybody now okay good ceiling of log base to have 100.

139
00:18:26.130 --> 00:18:42.030
Miles E Jones: is equal to seven so in order to encode every single different number between zero and 107 bits is them minimal number of bits required you can't do it in six bits does anybody know why.

140
00:18:52.980 --> 00:18:53.730
Miles E Jones: Exactly.

141
00:19:01.860 --> 00:19:03.780
Miles E Jones: Because two tubes.

142
00:19:07.380 --> 00:19:26.730
Miles E Jones: To to the six is less than 100 so there's not enough binary strings of links six in order to give each different number a different sort of name or a different string so seven is the minimum amount, so instead, what we can do is each number.

143
00:19:28.290 --> 00:19:44.820
Miles E Jones: convert it into binary right we know how to do this from CSC 20 right the binary is just a different number system it's not any better or worse than decimal but it allows us to encode it into bits now, we can do seven bits.

144
00:19:45.840 --> 00:19:50.280
Miles E Jones: per console and 10 castles.

145
00:19:51.870 --> 00:19:53.370
Miles E Jones: Now we got 70 bits.

146
00:19:54.630 --> 00:19:55.080
Miles E Jones: and

147
00:19:59.490 --> 00:20:12.270
Miles E Jones: hundred and 17 in one kilobyte yes you're right I should do that that's probably better log base to have 101 because zero is a is a castle right.

148
00:20:14.220 --> 00:20:18.150
Miles E Jones: You could have zero so there's 101 different values that you could pick from.

149
00:20:21.720 --> 00:20:26.400
Miles E Jones: Okay, good so does anybody see any room for improvement here.

150
00:20:30.330 --> 00:20:35.760
Miles E Jones: there's going to be version 2.5 do we need to store all 10 numbers.

151
00:20:42.120 --> 00:20:43.650
Miles E Jones: Why do we have to take the ceiling.

152
00:20:45.900 --> 00:20:53.160
Miles E Jones: Because bits are what we're trying to do is figure out the minimum number of bits bits are kind of discrete objects so.

153
00:20:54.210 --> 00:21:03.510
Miles E Jones: You can't use a fractional bit in this scenario, and so my calculator.

154
00:21:06.300 --> 00:21:10.200
Miles E Jones: log base to have 101 is equal to see.

155
00:21:19.290 --> 00:21:21.660
Miles E Jones: is equal to around.

156
00:21:23.910 --> 00:21:39.030
Miles E Jones: 6.658, meaning that to raise the 6.658 is going to be equal exactly 201 but I can't use a fraction of a bit.

157
00:21:41.160 --> 00:21:42.420
Miles E Jones: And so i'm going to have to.

158
00:21:45.000 --> 00:21:55.320
Miles E Jones: round up to seven bits now there's going to be some extra data or some extra binary strings and i'm not going to use it all but that's okay.

159
00:22:08.790 --> 00:22:13.290
Miles E Jones: Okay yeah we can that's a good idea is to use kind of like a.

160
00:22:14.460 --> 00:22:15.510
Miles E Jones: Like a hash map.

161
00:22:19.830 --> 00:22:21.180
Miles E Jones: Hoffman encoding maybe.

162
00:22:25.560 --> 00:22:47.280
Miles E Jones: So all the versions, that I have here they're not all always you can do all these other kind of things to do, and some of them have different advantages okay so back to kind of let's try to go along this route that i've planned for us, do we need all 10 numbers, is it enough to.

163
00:22:48.300 --> 00:22:53.880
Miles E Jones: is, are you able to kind of work out the 10th number from the other ones.

164
00:23:10.980 --> 00:23:11.640
Miles E Jones: Exactly.

165
00:23:13.860 --> 00:23:14.550
Miles E Jones: If.

166
00:23:17.400 --> 00:23:26.160
Miles E Jones: right if if everybody's being honest and all giving like a valid night arrangement, which means that the sum of all the.

167
00:23:26.610 --> 00:23:53.340
Miles E Jones: nights is going to exactly equal 100, then I don't need to store this last value, I can figure out what it is by subtracting the sum of all the other castles from 100 this is going to be equal to 100 minus the sum of the first knowing castles.

168
00:23:55.620 --> 00:24:01.230
Miles E Jones: So that means I can take off that so how many bit it's Do I need now.

169
00:24:23.190 --> 00:24:24.840
Miles E Jones: store 130.

170
00:24:25.920 --> 00:24:27.150
Miles E Jones: i'm almost getting there.

171
00:24:28.680 --> 00:24:33.240
Miles E Jones: Does anybody think it's possible to store 150 in one kilobyte.

172
00:24:35.580 --> 00:24:38.490
Miles E Jones: Is there a way to crunch this down even farther.

173
00:25:01.080 --> 00:25:08.640
Miles E Jones: yeah there are some wasted bits you're right because, like you said there's some bit strings that we're not using so.

174
00:25:13.110 --> 00:25:24.330
Miles E Jones: Okay, so let's keep on going and see what else we can do, do you all remember fibonacci encoding remember what it did it was a variable length encoding that.

175
00:25:25.710 --> 00:25:37.770
Miles E Jones: encoded shorter or smaller numbers was shorter strings and and bigger numbers with longer strings but this seems like a great opportunity to use it, because.

176
00:25:38.220 --> 00:25:43.320
Miles E Jones: we're going to have probably a lot more smaller numbers and we are bigger numbers.

177
00:25:44.040 --> 00:26:03.330
Miles E Jones: I don't know if you all, are trying to working out the strategy in your head, but putting 50 or more nights into one Castle is probably not the best idea those nights will probably be more well suited to be spread out a little bit better right, so they there will probably be more nights.

178
00:26:06.120 --> 00:26:14.220
Miles E Jones: More smaller number nights which will require shorter streams okay so.

179
00:26:15.780 --> 00:26:33.930
Miles E Jones: In order to use fibonacci encoding you hear there's there's a little there's a little problem and the problem is that fibonacci encoding cannot encode zero but we're allowed to keep the castles empty one way around this is to just add one to everything.

180
00:26:43.260 --> 00:26:45.600
Miles E Jones: That way, you get rid of that zero.

181
00:26:46.860 --> 00:26:47.670
Miles E Jones: Okay, so.

182
00:26:49.860 --> 00:26:54.180
Miles E Jones: remember how fibonacci encoding works every integer.

183
00:26:55.920 --> 00:26:56.760
Miles E Jones: Is.

184
00:26:59.010 --> 00:27:01.200
Miles E Jones: A unique some.

185
00:27:02.250 --> 00:27:04.980
Miles E Jones: nonconsecutive fibonacci numbers.

186
00:27:06.330 --> 00:27:32.010
Miles E Jones: For example, 16 is equal to three plus 13 so the code for 16 is going to be 001001 right that's why I haven't here 001001, then you put a one like that that sort of represents the comma or the break too, so you know to start reading the next number.

187
00:27:33.780 --> 00:27:51.720
Miles E Jones: Over the next number is also 00001001 and then break and then we have 0000001 that is for 21 because 21 is actually equal to a fibonacci number itself right.

188
00:27:52.920 --> 00:27:55.980
Miles E Jones: 00001.

189
00:28:12.990 --> 00:28:14.280
Miles E Jones: yeah if.

190
00:28:15.450 --> 00:28:19.320
Miles E Jones: You want to have like a an encoding.

191
00:28:20.970 --> 00:28:22.200
Miles E Jones: A reliable.

192
00:28:23.730 --> 00:28:26.400
Miles E Jones: encoding scheme and so um.

193
00:28:28.440 --> 00:28:39.090
Miles E Jones: yeah when I asked you to write the fibonacci encoding I want you to add one to everything, even if there are no zeros because I, because then, I still want you to.

194
00:28:45.090 --> 00:28:50.250
Miles E Jones: I want everything to be the same, I want it to be like a fixed encoding algorithm.

195
00:28:51.390 --> 00:28:52.530
Miles E Jones: encoding decoding.

196
00:28:59.250 --> 00:29:19.500
Miles E Jones: Okay, so um This is great now, this is a variable length encoding so I can't do the same type of calculation, I did before, where I say every Castle is going to have X number of bits Therefore, the whole thing is going to be a certain number.

197
00:29:23.100 --> 00:29:25.260
Miles E Jones: For example, if I put.

198
00:29:26.670 --> 00:29:34.470
Miles E Jones: If I put 10 in each Castle, this requires 60 bits and the reason is because.

199
00:29:36.450 --> 00:29:43.770
Miles E Jones: 11 right because you're going to add one to each Castle 11 requires 12345 bits.

200
00:29:45.150 --> 00:30:01.980
Miles E Jones: Five kind of number bits and then one each one includes one more bit for like the sort of comma or the break so each one of those 10s requires six bits you get 60.

201
00:30:06.060 --> 00:30:06.750
Miles E Jones: thing in the middle.

202
00:30:20.250 --> 00:30:24.690
Miles E Jones: Okay, I think this is probably the maximum number.

203
00:30:35.580 --> 00:30:45.120
Miles E Jones: And the reason is because 12 plus one is 1313 is kind of the next fibonacci number, and you have the bunch of them I don't know, maybe as a challenge.

204
00:30:46.440 --> 00:30:47.310
Miles E Jones: The challenge.

205
00:30:49.890 --> 00:30:50.340
Miles E Jones: Is.

206
00:30:51.510 --> 00:30:55.320
Miles E Jones: find a night arrangement.

207
00:30:59.970 --> 00:31:02.520
Miles E Jones: That requires.

208
00:31:03.990 --> 00:31:08.760
Miles E Jones: More than 65 bits.

209
00:31:15.360 --> 00:31:23.820
Miles E Jones: Okay, so I think that's the maximum number, certainly, you know it's some bound right because I could find something that.

210
00:31:24.810 --> 00:31:35.190
Miles E Jones: That takes 65 bits now, I think this is the minimum number, if you put all 100 into one Castle this only requires 29 bits so there's a big range of these things.

211
00:31:35.580 --> 00:31:53.760
Miles E Jones: Since this is a variable encoding you save a lot of space, if you have a lot of small numbers experimentally, I have found that using a random Colonel blotto examples kind of random night assignments each integer uses, on average, around 5.5 bits.

212
00:31:55.110 --> 00:32:06.960
Miles E Jones: So if we can store each night arrangement using roughly 55 bits or we could use the same trick that we did before and ignore the last castle.

213
00:32:09.120 --> 00:32:11.970
Miles E Jones: And then we only need around 50 bits.

214
00:32:23.100 --> 00:32:30.150
Miles E Jones: what's but is that what it is what's 5.5 times 940 9.5 yeah.

215
00:32:38.160 --> 00:32:47.700
Miles E Jones: yeah I did encode all 10 numbers, I did for this example, but but yes, you can use that same trick and take out the last castle.

216
00:32:49.200 --> 00:32:55.440
Miles E Jones: And just do nine and then you're you only need around 50 bits per castle.

217
00:33:00.360 --> 00:33:07.320
Miles E Jones: So this is great right, because now, I can store all 150 students in one kilobyte.

218
00:33:10.920 --> 00:33:16.650
Miles E Jones: Is anybody bothered by the fact that if everybody gives me this.

219
00:33:18.060 --> 00:33:18.510
Miles E Jones: This.

220
00:33:19.980 --> 00:33:21.540
Miles E Jones: This 65 bit.

221
00:33:23.310 --> 00:33:43.890
Miles E Jones: arrangement, then I can't store all 150 in there right, so this is like right on the cusp write it in general or on average, you probably will be able to, but there is a chance that you won't based on kind of the the variable nature.

222
00:33:47.460 --> 00:33:48.690
Miles E Jones: Oh ah.

223
00:33:52.650 --> 00:33:53.430
Miles E Jones: let's see.

224
00:33:57.720 --> 00:34:02.400
Miles E Jones: Sure, omit the last Castle i'll make that up a note on the.

225
00:34:05.730 --> 00:34:08.460
Miles E Jones: On the thing on the Google form.

226
00:34:10.350 --> 00:34:12.300
Miles E Jones: Okay, so is anybody bothered by that.

227
00:34:14.010 --> 00:34:17.310
Miles E Jones: This is um this is on average.

228
00:34:19.980 --> 00:34:22.500
Miles E Jones: right but worst case scenario.

229
00:34:25.020 --> 00:34:27.480
Miles E Jones: Is that 65 bits.

230
00:34:28.650 --> 00:34:29.550
per.

231
00:34:31.170 --> 00:34:31.800
Miles E Jones: arrangement.

232
00:34:37.020 --> 00:34:38.760
Miles E Jones: That means that you can only store.

233
00:34:42.360 --> 00:34:49.980
Miles E Jones: 65 you can only store 126.

234
00:34:58.920 --> 00:35:16.110
Miles E Jones: Any questions or comments you kind of understand the problem here, and the this is really good if you compare it to all the other things we've done, but there is this very, very, very small chance that you're going to need a lot of bits.

235
00:35:26.130 --> 00:35:29.160
Miles E Jones: Well, oh no wait, so I guess.

236
00:35:34.890 --> 00:35:36.930
Miles E Jones: Wait a minute did they do this right.

237
00:35:44.940 --> 00:35:47.820
Miles E Jones: Oh, I guess you can omit one of them right.

238
00:35:49.140 --> 00:35:49.740
Miles E Jones: Okay well.

239
00:35:52.110 --> 00:35:53.940
Miles E Jones: Either way, you have this variable length.

240
00:35:57.240 --> 00:35:58.920
Miles E Jones: Okay, so.

241
00:36:00.150 --> 00:36:12.690
Miles E Jones: Another version stars and bars, this is kind of what we talked about last week it's exactly the same scenario right, you have a bunch of nights you put them in castles so.

242
00:36:14.670 --> 00:36:17.250
Miles E Jones: We have 100 nights we put it in.

243
00:36:19.650 --> 00:36:21.720
Miles E Jones: 10 castles so.

244
00:36:23.280 --> 00:36:34.800
Miles E Jones: How big is this stars and bars string and instead of stars and bars I use the zeros and ones, and remember kind of how this works is that the number of zeros you have.

245
00:36:36.450 --> 00:36:37.800
Miles E Jones: Before the one.

246
00:36:40.260 --> 00:36:46.680
Miles E Jones: is equal to the number of nights in the first Castle, and the number of zeros between the castles.

247
00:36:48.120 --> 00:36:52.920
Miles E Jones: Between the ones the first two ones is the number of nights and the second Castle, and so on.

248
00:36:53.940 --> 00:36:57.570
Miles E Jones: Okay, good, so this is going to be 109 bits.

249
00:37:00.240 --> 00:37:01.290
Questions about that.

250
00:37:05.250 --> 00:37:09.660
Miles E Jones: Right you basically have 100 zeros and you have nine ones and the nine ones are the.

251
00:37:10.860 --> 00:37:13.170
Miles E Jones: The barriers in between the castles.

252
00:37:18.570 --> 00:37:20.970
123456789.

253
00:37:23.130 --> 00:37:24.750
Miles E Jones: Okay, does this actually help.

254
00:37:26.880 --> 00:37:31.740
Miles E Jones: Now I have 109 bits I could have done it in 50 bits with fibonacci encoding.

255
00:37:40.920 --> 00:37:45.420
Miles E Jones: Right and now only one kilobyte can hold 75 seems like we're kind of going backwards.

256
00:37:46.470 --> 00:37:46.860
Miles E Jones: Right.

257
00:37:49.230 --> 00:37:54.840
Miles E Jones: Right, so we call that to count the number of ways, you could put 100 nights into 10 castles you compute this, which means.

258
00:37:56.520 --> 00:38:01.050
Miles E Jones: you're you're counting fixed length.

259
00:38:02.250 --> 00:38:03.420
Miles E Jones: binary strings.

260
00:38:07.350 --> 00:38:13.110
Miles E Jones: With 109 bits and exactly.

261
00:38:16.650 --> 00:38:17.820
Miles E Jones: Nine ones.

262
00:38:19.050 --> 00:38:22.500
Miles E Jones: Okay, this seems worse why well it's.

263
00:38:23.640 --> 00:38:25.050
Miles E Jones: Worse, because there's my workbench.

264
00:38:30.060 --> 00:38:33.810
Miles E Jones: US have been encoding on the multiple bit blocks of stars and bars, including.

265
00:38:35.280 --> 00:38:35.880
Miles E Jones: Maybe.

266
00:38:41.280 --> 00:38:44.610
Miles E Jones: Okay, what do we done so far let's kind of see what.

267
00:38:46.260 --> 00:39:05.790
Miles E Jones: What we've done right our sort of best reliable strategy was this version 2.5 which did 63 bits per Castle for arrangement and we get 430 now if we if we rely on.

268
00:39:10.440 --> 00:39:25.080
Miles E Jones: fibonacci encoding and we we sort of assume everybody's going to give us sort of randomized castles, then we can do it in 50 bits per arrangement, and we can fit all 150 right, so the question i'm going to ask you.

269
00:39:26.310 --> 00:39:42.630
Miles E Jones: Or the question that we're going to try to answer now is what is the lower bound, what is the limit of what is the lower bound of number of bits that are required to store every single night arrangement.

270
00:39:48.960 --> 00:39:51.600
Miles E Jones: Every single night arrangement, if you.

271
00:39:52.950 --> 00:39:54.900
Miles E Jones: You know if they all have to be different.

272
00:39:57.330 --> 00:40:06.540
Miles E Jones: Okay, good so considering all coatings the best is 60 is there a way to use fewer bits.

273
00:40:07.650 --> 00:40:15.780
Miles E Jones: What is the fewest number of bits theoretically needed right okay so somebody just said it right here so let's let's write that in.

274
00:40:16.800 --> 00:40:17.520
Miles E Jones: There are.

275
00:40:19.020 --> 00:40:22.620
Miles E Jones: 109 choose nine.

276
00:40:23.820 --> 00:40:24.630
Different.

277
00:40:26.520 --> 00:40:27.360
arrangements.

278
00:40:31.380 --> 00:40:31.680
Miles E Jones: Okay.

279
00:40:33.660 --> 00:40:53.790
Miles E Jones: So the fewest number of bits theoretically needed is log base to have the ceiling 109 choose nine which is equal to 42 Is this possible to accomplish this is certainly less than 50 right, this is a good sign.

280
00:40:55.680 --> 00:40:58.140
Miles E Jones: Oh sorry, yes, the ceiling should go outside the lock like that.

281
00:41:08.130 --> 00:41:12.450
Miles E Jones: Is it possible to accomplish indeed is that what your answer is indeed.

282
00:41:14.940 --> 00:41:20.550
Miles E Jones: Yes, it is possible to accomplish that's what we're gonna do yeah let's do it.

283
00:41:21.840 --> 00:41:38.430
Miles E Jones: Okay, so just to recap there 109 choose nine possible night arrangements, if we assign a different bit string to each arrangement, what is the minimum number of bits needed and it's 42, this is the fewest number of bits required to uniquely describe each possible.

284
00:41:39.630 --> 00:41:42.270
Miles E Jones: management, how do we accomplish this.

285
00:41:43.980 --> 00:41:48.450
Miles E Jones: How do you get 109 um yeah it's the stars and bars.

286
00:41:52.650 --> 00:41:53.850
100 nights.

287
00:41:55.290 --> 00:41:56.250
10 castles.

288
00:41:57.780 --> 00:42:01.170
Miles E Jones: it's 100 plus 10 minus one choose 10 minus one.

289
00:42:05.640 --> 00:42:22.050
Miles E Jones: Okay, so let's just talk about a theoretically optimal encoding so if you're trying to encode a set of and begin objects um different objects, each with their own unique binary string then.

290
00:42:23.700 --> 00:42:24.870
I should put bits here and.

291
00:42:27.360 --> 00:42:44.370
Miles E Jones: Then the theoretically optimal encoding is log base to have big in bits where the ceiling of that and we've already kind of talked about that, because if you use fewer bits there's not enough different bit strings to go around to name every day differently.

292
00:42:46.890 --> 00:42:52.350
Miles E Jones: Theoretically optimal encoding for length and binary strings with exactly K ones would use.

293
00:42:53.880 --> 00:42:58.470
Miles E Jones: The ceiling of log base to have and choose K bits per string just for an example.

294
00:42:59.550 --> 00:43:03.600
Miles E Jones: So how do you do it well, one way to do it is to.

295
00:43:05.310 --> 00:43:24.030
Miles E Jones: sort of build a dictionary okay and we're going to list out all the possible strings in a particular order, then in order to encode the string you look it up where it falls in that dictionary let's say it's the 190 eighth.

296
00:43:25.560 --> 00:43:26.220
Miles E Jones: bit string.

297
00:43:27.420 --> 00:43:40.680
Miles E Jones: Or the 190 eighth object using this particular ordering, then we would encode it with the number 190 so you encode based on where it falls in a list.

298
00:43:43.170 --> 00:43:45.030
Miles E Jones: How do you decode well.

299
00:43:46.290 --> 00:43:59.970
Miles E Jones: What if I want to know which one is the 190 fifth string I just take my dictionary and look up where where it is now, why does this actually give you the theoretically optimal encoding it's because.

300
00:44:05.580 --> 00:44:07.320
Miles E Jones: With this strategy right.

301
00:44:08.670 --> 00:44:10.050
Miles E Jones: You will.

302
00:44:13.020 --> 00:44:14.010
Miles E Jones: encode.

303
00:44:15.960 --> 00:44:16.620
Miles E Jones: Each.

304
00:44:19.710 --> 00:44:20.490
Miles E Jones: object.

305
00:44:22.980 --> 00:44:24.720
Miles E Jones: To a unique.

306
00:44:26.400 --> 00:44:27.180
Miles E Jones: number.

307
00:44:29.160 --> 00:44:31.950
Miles E Jones: from zero to.

308
00:44:34.470 --> 00:44:36.630
Miles E Jones: ceiling of log base to event.

309
00:44:39.450 --> 00:44:42.180
Miles E Jones: I guess N minus this thing minus one.

310
00:44:43.980 --> 00:44:44.400
Miles E Jones: So.

311
00:44:46.080 --> 00:44:46.860
Miles E Jones: The.

312
00:44:48.330 --> 00:44:58.590
Miles E Jones: it's really kind of just listing them out and looking at the position Okay, how much data would be needed to store this dictionary.

313
00:45:00.120 --> 00:45:01.170
Miles E Jones: Well let's look at this.

314
00:45:04.080 --> 00:45:12.840
Miles E Jones: let's look at how How would look if you listed out all the strings okay let's say that, instead of 100 nights and one in 10 castles let's kind of go to a.

315
00:45:13.290 --> 00:45:25.800
Miles E Jones: more manageable example where we have only five nights and five castles then each night arrangement can be represented as a fixed density binary string of length, what with exactly how many ones.

316
00:45:38.700 --> 00:45:44.460
Miles E Jones: Right nine with exactly, for once, or you just put zeros under these guys.

317
00:45:45.900 --> 00:45:51.330
Miles E Jones: And then you have the ones in between the castles and this corresponds to the.

318
00:45:52.800 --> 00:46:09.120
Miles E Jones: string 001011001 okay now Where does this string fall in the list of all of those strings.

319
00:46:10.440 --> 00:46:25.890
Miles E Jones: OK, so the theoretical optimal encoding for for this sort of play example with five castles five nights use this seven bits because nine choose for is 126 log base to have 126 is very close to seven.

320
00:46:27.000 --> 00:46:48.120
Miles E Jones: So to encode this particular example we find it in the dictionary and encode it as its position as a seven bit binary integer example find this is the, this is the example we had yeah 001011001 find this in the list.

321
00:46:49.290 --> 00:46:57.930
Miles E Jones: here's the list here's the dictionary since there's 126 I can I can list them all out and notice that I have numbered them from zero up to 125.

322
00:46:59.370 --> 00:47:02.640
Miles E Jones: So I just go through the list and try to find the.

323
00:47:04.440 --> 00:47:17.610
Miles E Jones: The exact binary string which was 100101100101011001.

324
00:47:21.150 --> 00:47:21.600
Here we go.

325
00:47:24.060 --> 00:47:34.140
Miles E Jones: Trying to code it with the number 22 and if I want I can convert that 22 into a binary it's binary expansion, but.

326
00:47:34.590 --> 00:47:46.170
Miles E Jones: When we're talking about this type of this is called ranking we're talking about ranking we're just going to be talking about the position so in general will just be talking about the base 10 version of the position.

327
00:47:53.610 --> 00:48:01.320
Miles E Jones: Okay does anybody have any questions about how how this sort of works in general it's not it's not the most high tech.

328
00:48:02.220 --> 00:48:13.200
Miles E Jones: way to do it the organist we're going to talk about a little bit more and figure out more efficient ways rather than storing this big dictionary.

329
00:48:13.620 --> 00:48:35.550
Miles E Jones: Is there a way to get the position without having to look it up and what I want you to notice about this list is the order of the strings can anybody tell me, maybe in a few words, what is the rule, how are these streams ordered.

330
00:48:37.500 --> 00:48:42.720
Miles E Jones: Why is this one, the first string and this one, the last string is there any.

331
00:48:43.920 --> 00:48:48.720
Miles E Jones: Can anybody see any rule or any pattern or.

332
00:48:57.660 --> 00:48:59.760
Miles E Jones: Okay, good yeah so that they're.

333
00:49:00.810 --> 00:49:03.300
Miles E Jones: they're sorted by value right.

334
00:49:08.670 --> 00:49:12.480
Miles E Jones: right if you converted them to their binary number they they would.

335
00:49:14.220 --> 00:49:22.080
Miles E Jones: There be sorted like that right, this number here converted to whereas this one converts like I don't know.

336
00:49:23.610 --> 00:49:24.540
Miles E Jones: A few thousand.

337
00:49:27.060 --> 00:49:36.000
Miles E Jones: Right, which is the same as something called lexicon graphic ordering that's that's also what i'm looking for Mexico graphic ordering oh.

338
00:49:37.230 --> 00:49:38.640
Miles E Jones: Well we're going to talk about in a minute.

339
00:49:43.440 --> 00:49:46.440
Miles E Jones: This is also called dictionary ordering.

340
00:49:53.580 --> 00:49:56.790
Miles E Jones: it's it's good, because this is the way you find things in the dictionary.

341
00:50:01.110 --> 00:50:02.520
Miles E Jones: yeah alphabetical.

342
00:50:04.020 --> 00:50:16.950
Miles E Jones: Exactly okay so um how do I decode what if, if I had access to the dictionary, then I could tell you that my night arrangement is this seven bit string what is my night arrangement.

343
00:50:19.290 --> 00:50:20.340
Miles E Jones: that's to encode.

344
00:50:26.730 --> 00:50:27.570
Miles E Jones: look it up right.

345
00:50:34.380 --> 00:50:56.310
Miles E Jones: Okay now let's get let's get back to our original problem if I had to store each bit string of length 109 for each of the night arrangements for 100 nights and 10 castles how much memory with this need right you could kind of think about it, this long long scroll right where he.

346
00:50:58.080 --> 00:51:11.970
Miles E Jones: position is this or each each entry or position is this really, really long string and you store all the positions and you store all the strings it's way too much memory.

347
00:51:13.980 --> 00:51:17.070
Miles E Jones: 109 shoes nine is around 4 trillion.

348
00:51:18.420 --> 00:51:22.380
Miles E Jones: OK, and then each one of those each one.

349
00:51:23.610 --> 00:51:26.880
Miles E Jones: uses 109 bits.

350
00:51:27.960 --> 00:51:30.720
Miles E Jones: So you're talking about 400 trillion bits.

351
00:51:36.510 --> 00:51:38.190
Miles E Jones: Around 50 terabytes.

352
00:51:41.250 --> 00:51:51.510
Miles E Jones: So, in order to store that entire dictionary, you need around 50 terabytes, which is a lot of memory for this stupid problem.

353
00:51:52.890 --> 00:51:53.430
Right.

354
00:51:59.790 --> 00:52:06.360
Miles E Jones: Okay, so is this I guess the The next thing we're going to do is answer the question.

355
00:52:07.470 --> 00:52:22.200
Miles E Jones: Is is this process even useful if I have to store such a big dictionary, and the answer is yeah what we can do is, we can simulate the dictionary using an algorithm.

356
00:52:23.100 --> 00:52:40.800
Miles E Jones: And we can basically figure out what position, a particular binary string is without having to look it up, and you can also go the other way, if I give you a position, you can use an algorithm to figure out what binary string is in that position.

357
00:52:46.410 --> 00:52:53.910
Miles E Jones: Okay, so this is called something called a ranking and unranked algorithm the ranking algorithm maps.

358
00:52:55.410 --> 00:53:17.520
Miles E Jones: The object to the position and unranked algorithm maps the position to the object so it's a one to one map it's a by injection between the numbers one through however many right ceiling a log base to have the number of objects by Jackson from that to the actual set of objects.

359
00:53:18.990 --> 00:53:31.200
Miles E Jones: Instead of listing all possibilities if we order the bid strings in a particular way, then we can use a ranking algorithm that converts a bit string to its position and unraveling algorithm that converts a position to the bloodstream.

360
00:53:32.760 --> 00:53:35.850
Miles E Jones: let's look at a possible way to order the fixed entity bit strings.

361
00:53:37.110 --> 00:53:41.970
Miles E Jones: lex order or lexical graphic ordering or dictionary ordering.

362
00:53:47.790 --> 00:54:01.860
Miles E Jones: As a way to order all fixed as the big strings you can compare to fixed nc big strings and he really tell which string comes before the other using this ordering it also allows you if you had the dictionary to find the bit string a lot better.

363
00:54:03.750 --> 00:54:13.740
Miles E Jones: So it's actually the same as like somebody said ordering by their binary values.

364
00:54:17.910 --> 00:54:29.850
Miles E Jones: Okay, good somebody has already kind of on the right track, you check whether the first bit is one if it is then add and minus one choose K otherwise keep the value zero then recursive we do it yeah.

365
00:54:31.410 --> 00:54:32.130
Miles E Jones: Okay, so.

366
00:54:34.110 --> 00:54:55.320
Miles E Jones: let's kind of build up to that so let's say that i'm want to write out all length five binary strings with exactly three ones listed in lexical graphic ordering Okay, so the first one is going to be, of course, 00111 okay so that's going to correspond to the position.

367
00:54:57.600 --> 00:54:58.110
Miles E Jones: of zero.

368
00:55:00.210 --> 00:55:16.590
Miles E Jones: The next one is 01011 that corresponds to 101101 that corresponds to 201110.

369
00:55:18.210 --> 00:55:20.640
Miles E Jones: That corresponds to three right.

370
00:55:23.220 --> 00:55:57.990
Miles E Jones: I need one right 10011 corresponds to 410101 corresponds to 510110 corresponds to 611001 corresponds to 711010 corresponds to eight and 11100 corresponds to nine okay that's all of them, there are 10 of them five choose three.

371
00:55:59.520 --> 00:56:02.340
Miles E Jones: And so it makes sense that we're able to.

372
00:56:04.830 --> 00:56:14.460
Miles E Jones: order them and map them to the numbers zero through nine now just like Kevin said I want you to notice something.

373
00:56:15.540 --> 00:56:25.920
Miles E Jones: Is that because we made it we we ordered them in Mexico graphic ordering or dictionary ordering that means all this start with bro.

374
00:56:28.290 --> 00:56:31.110
Miles E Jones: will come before all strings this with one.

375
00:56:32.400 --> 00:56:37.650
Miles E Jones: Now, using pascal's identity remember.

376
00:56:38.700 --> 00:56:55.500
Miles E Jones: We were able to kind of split all fixed as the binary strings based on if they start with zero or start with one how many of them start with zero well in this case it's four but that comes from for choose three.

377
00:56:56.970 --> 00:57:04.410
Miles E Jones: Right, because if you ignore the zero all you're doing is you're counting fixed density binary strings of length for with three ones.

378
00:57:08.790 --> 00:57:10.530
Miles E Jones: And how about this one.

379
00:57:12.690 --> 00:57:14.220
Miles E Jones: Well, this is for choose to.

380
00:57:26.850 --> 00:57:27.300
Miles E Jones: Oh God.

381
00:57:32.790 --> 00:57:42.510
Miles E Jones: But for choose three really is the number that we're we're after Why is this important well this allows you to distinguish.

382
00:57:43.770 --> 00:57:52.410
Miles E Jones: What the what the position is, or at least give your give like a range of what the position is based on that first bit so if the first bit is zero.

383
00:57:55.980 --> 00:57:58.740
Miles E Jones: Right first bit is zero.

384
00:58:01.980 --> 00:58:03.120
Miles E Jones: Then position.

385
00:58:05.460 --> 00:58:08.490
Miles E Jones: is strictly less than four choose three.

386
00:58:11.460 --> 00:58:13.380
Miles E Jones: And if the first bit is one.

387
00:58:16.650 --> 00:58:17.700
Miles E Jones: than the position.

388
00:58:19.620 --> 00:58:27.900
Miles E Jones: is greater than or equal to four choose three, and this is just a general rule, and just like Kevin said you basically.

389
00:58:29.130 --> 00:58:31.800
Miles E Jones: recursive Lee figure it out all the way to the end.

390
00:58:41.730 --> 00:58:58.350
Miles E Jones: So let's order is dictionary order so that means that if you like somebody said, if you replace all the zeros with a's and all the ones with bees, then what order would they come in the dictionary so.

391
00:59:00.240 --> 00:59:01.170
Miles E Jones: I have another thing here.

392
00:59:02.370 --> 00:59:16.410
Miles E Jones: So, for example, a bee bee bee that's number one that comes before be a be a be in the dictionary, so you just use that as the ordering.

393
00:59:19.020 --> 00:59:29.610
Miles E Jones: Alternatively, you can convert each one of these things to their whatever binary integer they correspond to an order them that way.

394
00:59:32.760 --> 00:59:44.820
Miles E Jones: it's kind of like if the ones, if the you know if the ones are kind of closer to the right that's going to be a smaller number if they're closer to the left that's going to be a bigger number, because you have bigger powers of two.

395
00:59:51.990 --> 00:59:52.800
Miles E Jones: Okay, so.

396
00:59:53.880 --> 01:00:03.720
Miles E Jones: let's order algorithm, we need to algorithms given specific and in K you map a string to the rank in a position to unranked.

397
01:00:06.540 --> 01:00:07.440
Miles E Jones: Okay, so.

398
01:00:08.790 --> 01:00:19.770
Miles E Jones: Kevin has a great strategy here to do a recursive algorithm i'm going to use kind of a shortcut but it turns out to be the same thing.

399
01:00:21.720 --> 01:00:22.140
Miles E Jones: Okay.

400
01:00:23.400 --> 01:00:25.320
Miles E Jones: So, in order to.

401
01:00:26.730 --> 01:00:30.270
Miles E Jones: are given a bit string s or fixed density.

402
01:00:34.020 --> 01:00:47.370
Miles E Jones: Of length and with exactly K ones, the way that you rank it is to write the numbers and minus one down to zero under each bit Okay, so in this case.

403
01:00:48.510 --> 01:00:52.710
Miles E Jones: In this example and is equal to nine K is equal to four.

404
01:00:54.120 --> 01:01:05.580
Miles E Jones: So right eight down to zero underneath each bit okay ready 8765321 and zero.

405
01:01:06.960 --> 01:01:07.290
Okay.

406
01:01:09.660 --> 01:01:23.190
Miles E Jones: that's the first step, the next step is right, the numbers K down to one under each one so K is equal to force I do 432 and sorry.

407
01:01:26.100 --> 01:01:26.520
To.

408
01:01:32.760 --> 01:01:34.020
Miles E Jones: Okay, then.

409
01:01:35.760 --> 01:01:39.000
Miles E Jones: All of the all the contacts have.

410
01:01:40.860 --> 01:01:44.760
Miles E Jones: Two numbers to act on top of each other, those turn in.

411
01:01:46.320 --> 01:01:47.730
Miles E Jones: parentheses around them.

412
01:01:48.930 --> 01:01:58.110
Miles E Jones: And you six choose four plus four choose three plus three choose two plus zero choose one.

413
01:01:59.790 --> 01:02:10.170
Miles E Jones: So six choose for is 15 plus four plus three plus if you ever have a smaller number choose a bigger number that's going to be zero.

414
01:02:12.210 --> 01:02:14.070
Miles E Jones: is equal to 22.

415
01:02:15.540 --> 01:02:19.320
Miles E Jones: isn't that the exact position that we associated with this already.

416
01:02:22.290 --> 01:02:29.640
Miles E Jones: So I didn't have to look it up, I could compute the position with mathematics, rather than having that big.

417
01:02:30.990 --> 01:02:35.970
Miles E Jones: list okay well, you can go into the list, and you can check your answer right.

418
01:02:40.860 --> 01:02:42.120
Miles E Jones: Good any questions about that.

419
01:02:50.940 --> 01:03:06.930
Miles E Jones: let's do a few more examples Okay, so how about this guy 11000156789 how about this guy.

420
01:03:10.050 --> 01:03:13.740
Miles E Jones: Right it's going to be as equal to nine K is equal to four.

421
01:03:14.820 --> 01:03:22.080
Miles E Jones: Alright, so I write down 876543210.

422
01:03:24.090 --> 01:03:26.490
Miles E Jones: And then you write all of the.

423
01:03:27.510 --> 01:03:32.610
Miles E Jones: The numbers for down to one underneath each one oops.

424
01:03:33.900 --> 01:03:37.770
Miles E Jones: 4321.

425
01:03:38.850 --> 01:03:40.650
Miles E Jones: Right and then you get all of these.

426
01:03:44.310 --> 01:03:45.960
Miles E Jones: binomial coefficients will come on.

427
01:03:47.280 --> 01:03:50.700
Miles E Jones: A choose four plus seven choose three.

428
01:03:51.720 --> 01:03:54.840
Miles E Jones: plus three choose to close one choose one.

429
01:03:56.160 --> 01:03:57.150
Miles E Jones: is equal to.

430
01:03:59.850 --> 01:04:00.360
Choose for.

431
01:04:01.980 --> 01:04:03.900
For 70.

432
01:04:07.410 --> 01:04:07.830
Miles E Jones: Plus.

433
01:04:11.400 --> 01:04:12.300
Miles E Jones: 35.

434
01:04:13.410 --> 01:04:13.920
us.

435
01:04:31.170 --> 01:04:36.360
Miles E Jones: Oh that's kind of cool so, then we can go check our answer right 109.

436
01:04:37.920 --> 01:04:43.350
Miles E Jones: Is 1100010101100010.

437
01:04:46.830 --> 01:05:15.330
Miles E Jones: Okay, and if you're if you're interested in seeing you know the the first one in lexicographical order is going to be 123451111 does this work still works, because you have 876543210 and then, when you write the numbers 4321 you have.

438
01:05:16.590 --> 01:05:34.080
Miles E Jones: Three choose for plus to choose three plus one choose to us to choose one which is equal to zero Plus zero Plus zero Plus zero is equal to zero and it's positioned zero and then, on the other end of the spectrum.

439
01:05:35.370 --> 01:05:40.350
Miles E Jones: You have 11110000.

440
01:05:42.030 --> 01:05:42.450
As many.

441
01:05:45.360 --> 01:05:52.110
Miles E Jones: And do the same thing 876543210 and then.

442
01:05:53.190 --> 01:05:56.340
Miles E Jones: 432 and one.

443
01:05:59.250 --> 01:06:07.350
Miles E Jones: So you have eight choose for a seven choose three plus six choose to plus five choose one.

444
01:06:08.970 --> 01:06:19.380
Miles E Jones: is equal to 70 plus 50 sorry plus 35 plus 15 plus five is equal to 125.

445
01:06:20.760 --> 01:06:22.350
Miles E Jones: Which is the last.

446
01:06:24.480 --> 01:06:25.290
Miles E Jones: last thing down there.

447
01:06:28.140 --> 01:06:30.150
Miles E Jones: Okay So hopefully you all kind of.

448
01:06:33.450 --> 01:06:38.370
Miles E Jones: are able to to rank these things, the process is not super hard.

449
01:06:49.110 --> 01:06:52.860
Miles E Jones: I say, maybe look at kevin's quote here.

450
01:06:56.910 --> 01:07:03.270
Miles E Jones: Sorry notice that this first guy starts with a one, and that means that.

451
01:07:07.320 --> 01:07:20.790
Miles E Jones: The position that means right SUP into all the strings that start with zero are before 70 and all the strings that start with one are after 70.

452
01:07:27.150 --> 01:07:29.010
Miles E Jones: Okay yeah I was lagging a bit.

453
01:07:31.980 --> 01:07:32.700
Miles E Jones: i'll just move on.

454
01:07:33.810 --> 01:07:39.750
Miles E Jones: Does anybody have any questions about this were you able to see all of this calculation.

455
01:07:45.840 --> 01:07:51.570
Miles E Jones: Okay, good all right So how do you unwrap given a position, how do you figure out the.

456
01:07:53.700 --> 01:07:54.300
Miles E Jones: string.

457
01:07:55.320 --> 01:08:04.080
Miles E Jones: This is a little bit more complicated, but we're going to use pascal's triangle to kind of help us figure it out so given a position, p.

458
01:08:06.630 --> 01:08:23.490
Miles E Jones: You need to know what kind of strings you're looking for right i'm looking for lengthened binary strings with K ones, if you don't if you don't have this information, the end of the K it's meaningless because I just give you a position of some list.

459
01:08:26.490 --> 01:08:32.940
Miles E Jones: Okay, so set, what do I need to do this so R equals to pete no I don't need to do that sorry.

460
01:08:34.860 --> 01:08:36.450
Oh, I do need to do that.

461
01:08:38.670 --> 01:08:42.120
Miles E Jones: Because you're given a position P Okay, so our is this thing.

462
01:08:43.140 --> 01:08:59.010
Miles E Jones: So essentially what you do is you, the first thing to do is find the biggest X such that X choose K is less than equal to our, then you subtract off that binomial coefficient.

463
01:09:01.560 --> 01:09:06.450
Miles E Jones: And then you decrease K by one and you keep on going until you get down to the end.

464
01:09:08.070 --> 01:09:17.160
Miles E Jones: So let's look at how it works and we're going to use pascal's triangle, to help visualize what's going on okay so let's try to unranked.

465
01:09:19.170 --> 01:09:19.950
Miles E Jones: Where.

466
01:09:21.060 --> 01:09:24.180
Miles E Jones: is equal to nine K is equal to four.

467
01:09:26.790 --> 01:09:30.420
Miles E Jones: Oh no we're doing one on one okay sorry.

468
01:09:31.530 --> 01:09:33.540
Miles E Jones: Maybe you all, can do this as an exercise.

469
01:09:42.900 --> 01:09:52.200
Miles E Jones: How about one on one so remember K is equal to four so that's the first iteration so.

470
01:09:53.520 --> 01:09:55.860
Miles E Jones: here's pascal's triangle and remember.

471
01:09:57.000 --> 01:09:59.790
Miles E Jones: We have and choose K.

472
01:10:04.830 --> 01:10:05.190
Right.

473
01:10:08.400 --> 01:10:13.500
Miles E Jones: Yes, so we have and going down and K going to the right.

474
01:10:14.550 --> 01:10:17.940
Miles E Jones: Okay, so when K is equal to four.

475
01:10:20.460 --> 01:10:25.110
Miles E Jones: That means we're going to look at this column, the fourth column.

476
01:10:31.260 --> 01:10:35.130
Miles E Jones: Okay, so what's the biggest number in this column.

477
01:10:36.300 --> 01:10:46.290
Miles E Jones: that's less than or equal to 101 70 okay 70.

478
01:10:48.390 --> 01:10:51.120
Miles E Jones: that's what we get and that's a choose for.

479
01:10:52.920 --> 01:10:53.460
So.

480
01:10:54.750 --> 01:10:58.710
Miles E Jones: He choose for is less than or equal to one one, so we get.

481
01:11:06.030 --> 01:11:18.180
Miles E Jones: Our now is equal to our minus eight choose for so we get 101 minus 70 which is 31 okay so that's the first iteration.

482
01:11:19.860 --> 01:11:25.140
Miles E Jones: So the second iteration now, we have our is equal to 31 and K is equal to three.

483
01:11:26.880 --> 01:11:31.530
Miles E Jones: So caves equal to three, so what is the largest.

484
01:11:34.290 --> 01:11:35.100
Miles E Jones: number.

485
01:11:36.210 --> 01:11:37.740
Miles E Jones: In this column.

486
01:11:38.760 --> 01:11:39.690
Miles E Jones: That.

487
01:11:41.160 --> 01:11:48.000
Miles E Jones: Less than or equal to 3120 okay good 20.

488
01:11:50.640 --> 01:11:52.830
Miles E Jones: So that's six choose three.

489
01:11:54.780 --> 01:12:09.390
Miles E Jones: To 31 so we get our is equal to our minus six choose three, which is equal to 31 minus 20 which is 11 okay so that's the second iteration.

490
01:12:10.560 --> 01:12:16.650
Miles E Jones: So now our is equal to 11 and K is equal to two just do the same thing.

491
01:12:21.210 --> 01:12:24.360
Miles E Jones: Here the next one is going to be 10.

492
01:12:25.530 --> 01:12:26.490
Miles E Jones: Five choose to.

493
01:12:34.350 --> 01:12:38.100
Miles E Jones: Or is equal to our minus five choose to.

494
01:12:41.280 --> 01:12:44.970
Miles E Jones: Which is equal to 11 minus 10 which is one.

495
01:12:52.410 --> 01:12:56.250
Miles E Jones: Are is equal to one K is equal to one.

496
01:12:58.230 --> 01:12:58.470
Right.

497
01:13:04.830 --> 01:13:05.760
Miles E Jones: what's the.

498
01:13:07.950 --> 01:13:14.700
Miles E Jones: largest number choose one that is less than or equal to one is this one right.

499
01:13:15.750 --> 01:13:18.780
Miles E Jones: So one choose one is less than or equal to one.

500
01:13:20.580 --> 01:13:28.860
Miles E Jones: And then we get our is equal to our minus one choose one which is one minus so our is equal to zero.

501
01:13:32.130 --> 01:13:36.630
Miles E Jones: But we're kind of done now, so how is this going to help us.

502
01:13:40.740 --> 01:13:47.970
Miles E Jones: You take all of those squares that you did and pull them over to the side, so we have an eight.

503
01:13:49.740 --> 01:13:51.150
Miles E Jones: We have a six.

504
01:13:52.470 --> 01:13:53.370
Miles E Jones: We have a 10.

505
01:13:55.530 --> 01:13:56.220
And we have a one.

506
01:13:58.320 --> 01:14:23.580
Miles E Jones: Okay, so our string is going to have ones in those positions and zeros in all the other positions so let's write up the string here, so if I write the positions 876543210 then it's going to have positions in the eight the six the five and the one and zeros everywhere else.

507
01:14:26.280 --> 01:14:34.050
Miles E Jones: Okay, so it's going to correspond to this string here 101100010 So if I go to.

508
01:14:35.250 --> 01:14:36.060
Miles E Jones: where's my table.

509
01:14:38.370 --> 01:14:44.040
Miles E Jones: They go to the 101 101100010.

510
01:14:51.390 --> 01:14:53.100
Miles E Jones: little bit more involved, but.

511
01:14:54.990 --> 01:14:57.780
Miles E Jones: Really, the calculations shouldn't be too bad.

512
01:14:59.250 --> 01:15:04.230
Miles E Jones: Oh, here we go, we have 55 alright so let's try to do this one, a little bit more quickly.

513
01:15:12.060 --> 01:15:15.900
Miles E Jones: R equals 55 K is equal to four, so we have.

514
01:15:17.610 --> 01:15:20.010
Miles E Jones: 35 right so.

515
01:15:21.120 --> 01:15:22.350
Seven choose for.

516
01:15:24.450 --> 01:15:30.360
Miles E Jones: Okay, so the next iteration we have ours equal to 20 K is equal to three.

517
01:15:32.790 --> 01:15:34.350
Miles E Jones: Okay, good we get a 20.

518
01:15:35.490 --> 01:15:39.900
Miles E Jones: Okay, so six choose three is equal to 20.

519
01:15:42.090 --> 01:15:42.810
Miles E Jones: So now.

520
01:15:44.850 --> 01:15:49.260
Miles E Jones: Are is equal to zero K is equal to two.

521
01:15:50.280 --> 01:15:56.400
Miles E Jones: Right so you're kind of finding the biggest number that gives you zero so that's going to be.

522
01:15:57.990 --> 01:16:07.920
Miles E Jones: 1200 K is one.

523
01:16:09.660 --> 01:16:10.950
Miles E Jones: that's going to be zero.

524
01:16:21.390 --> 01:16:22.890
Miles E Jones: should be zero choose to.

525
01:16:26.970 --> 01:16:28.800
Miles E Jones: choose to what am I doing one choose to.

526
01:16:31.050 --> 01:16:31.440
Miles E Jones: choose one.

527
01:16:32.520 --> 01:17:04.020
Miles E Jones: OK, so now, that means that ones are in position 016 and seven so 887-654-3210 we have positions at 111100000011000000011 is that right go back to the 55 01.

528
01:17:05.910 --> 01:17:06.450
Miles E Jones: Okay, good.

529
01:17:18.510 --> 01:17:22.080
Miles E Jones: Will we be given a table for any exam questions.

530
01:17:25.980 --> 01:17:28.530
Miles E Jones: you're going to be multi use calculators so.

531
01:17:33.150 --> 01:17:36.900
Miles E Jones: And note sheets and notes and stuff so you can just pull up this table from the slides.

532
01:17:40.800 --> 01:17:42.630
Miles E Jones: Okay So in conclusion.

533
01:17:43.650 --> 01:17:45.060
Miles E Jones: Very version five.

534
01:17:46.530 --> 01:18:00.750
Miles E Jones: The ranking and on ranking for each night arrangement and code it to 109 length but binary stream then rank that binary stream then store the binary expansion of the rank as a 42 bit integer can we do any better, no.

535
01:18:05.460 --> 01:18:19.650
Miles E Jones: Okay, so version five users 42 bits the best we can do, and now we can reliably hold 195 arrangements now questions to think about is this encoding.

536
01:18:20.340 --> 01:18:43.200
Miles E Jones: algorithm or this encoding scheme is it good or is it bad it's good in the sense that it shortens the string as far as you can go but it's bad because it takes a lot of work to to compress and to decompress right and it arguably I think kind of version.

537
01:18:45.750 --> 01:18:57.120
Miles E Jones: Was it version two is kind of the best because you can still do all of the calculations, you need without having to worry so much about encoding and decoding.

538
01:18:59.190 --> 01:19:05.160
Miles E Jones: So it's kind of the best of both worlds it all depends on what you want to do with this data, if you want to store it away.

539
01:19:05.910 --> 01:19:20.430
Miles E Jones: For years and years and years and don't want to look at it, you probably want to use that is because, to get it down to the smallest and then, when you need it, you can decode it, but if you're going to be using the day.

540
01:19:26.040 --> 01:19:26.280
yeah.

541
01:19:37.050 --> 01:19:46.800
Miles E Jones: Okay, how did I get that number again yeah so I guess classes done now, and we can i'll stick around for any follow up questions for the next 10 minutes or so.

542
01:19:52.650 --> 01:19:58.590
Miles E Jones: With a midterm include week for know the midterm is going to include up to and including.

543
01:20:00.090 --> 01:20:04.170
Miles E Jones: pigeonhole principles stars and bars all of that stuff.

544
01:20:06.390 --> 01:20:12.300
Miles E Jones: Can you prove that you can't do any better with the pigeonhole principle yes that's great, this is a great.

545
01:20:14.250 --> 01:20:16.350
Miles E Jones: Great application of pigeonhole principle.

546
01:20:18.600 --> 01:20:19.290
Miles E Jones: it's awesome.

547
01:20:39.600 --> 01:20:41.610
Miles E Jones: We talked about find duplicate, how do you.

548
01:21:11.190 --> 01:21:12.390
where's the fine duplicate.

549
01:21:18.930 --> 01:21:24.900
Miles E Jones: I didn't say anything so I was waiting for you to explain what that means fine duplicate.

550
01:22:07.140 --> 01:22:08.730
Miles E Jones: Right okay yeah so.

551
01:22:09.810 --> 01:22:10.920
Miles E Jones: You can kind of.

552
01:22:18.930 --> 01:22:31.020
Miles E Jones: Have a certain number and then tell how many times it occurs, but that's really only going to save space, if your night arrangements are very repetitive.

553
01:22:39.600 --> 01:22:46.710
Miles E Jones: Because, if you have a single different number for each Castle, then you can't save any space.

554
01:22:48.930 --> 01:22:49.350
Right.

555
01:24:03.660 --> 01:24:13.050
Miles E Jones: Okay, other than that see you all, I guess, tomorrow, we have the exam so be ready for that and we'll send some instructions over pizza.

