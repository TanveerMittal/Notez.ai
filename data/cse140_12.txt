 Okay. Hello everybody. Welcome back. So today is the day that if we're going to go over some sample problems for mid-term two, just to kind of clarify what's going to be on the exam. We have covered combinational and sequential circuits. There is no homework due this week. Yea. But that's because I imagine you're quite busy getting ready for the exam. So I didn't want to give homework on top of that. Exam. Number two will be this Thursday, again, same set up, but it's going to start at nine AM Pacific. You will have 24 hours to take it. But the moment you start taking it to the clock starts ticking from beginning to end, you will have 60 minutes. I've decided to change the setup, so now you have additional 15 minutes to adjust for the time it takes to download the problems from Canvas and submit solutions to great scope. When I looked at the data from last exam, it turns out that there were only 14 people who were late submitting the exam. And maximum that I found was about ten minutes late. So I believe that if we get 15 minutes with no penalty, that should give everybody enough time to get their exam in. Beyond 15 minutes, up to 20 minutes. You will still get a great for your exam, but you will lose half of the points. And above 20 minutes you lose 80% of the points. So really make sure that you turn in your exam by 15 minutes. To avoid any penalty. The exam will again have four problems. It will have a 110 points, ten points or bonus built into the exam. This kind of exam was designed to be a little bit easier, relatively speaking, than previous years exams. And I will walk you through the sample midterm to kind of illustrate what to study versus what not to study. And then I'll also go through a bunch of slides with various sample problems. And we'll ask you to vote on whatever problems you would like me to solve. So let me think, oh, what material is covered? Everything up to and including today with the exception of timing problems related to set up and hold times. And there is nothing on register transfer level. So basically the to, the, all the homeworks up to and including homework for all of the examples I'm going to go through today, some of them or something similar might appear on the exam. And everything I've covered in class other than when I started talking about set up and hold times and when I talked about also register transfer level. So there are no questions on high level state machines. Those questions and questions related to set up and hold times are going to be on the next exam. Any other questions regarding logistics of the exam or what's going to be on the exam versus not. Oh, one other thing that I almost forgot to mention, we did find some inconsistencies in grading of the exam. Number one, specifically to parts of one question or two versions of one question. We're not great at consistently with the others. So you should, what you should be seeing is your, your points go up only if you're affected by this. It's the point change is not going to be traumatic. It'll be about four or five points at most. I noticed yesterday that there was a problem. We actually did update the points on the problems and made sure that the grading is consistent. But I believe what get uploaded into Canvas might have been a non curved version of the grade. So we're fixing that. If you see your score go down for exam, don't panic. It means that we messed up, will upload the version of the grade that is curved. And that should happen sometime today. So if you don't see either the same score that you had last week or higher score than let me know and we'll fix it, but let me know on Wednesday or later. Just give us today to make sure that it's all fixed and correct. Okay. So let me then share my midterm two from last year. So you guys can see, I can walk you through that sample exam. So here's the sample exam. And what you can see here first is that this exam was 80 minutes. But within 80 minutes, they had six problems to work on. And I would say that some of those problems are more complicated than I would expect to put on your exam. In your case, you have 60 plus 15 minutes. So if your upload works while you effectively have almost the same amount of time for two thirds of the problems. So hopefully this will be easier and less stressful for you. That was the goal. On this exam, you can see that they could, students could only look at the single sheet of paper with handwritten notes, your exam, you have notes and computer open. So again, insignificantly. Easier, I believe, than what it normally is, but I give to examine class. Now walking you through the exam, here's a pattern recognizer question. This is pretty typical question. It's very similar to what you've got done the homework. I will expect something of this type to show up potentially. Here, the first part of the problem, which has relatively few points, is asking you to use the shift register to recognize the pattern. And we even drew the shift register for you. So that way, all you have to do is just add the gates on top. Notice that there are no set up or hold violations, and note that values are flowing from left to right. In part B of this, we asked you to actually draw merely Finite State Machine. B said use as few states as possible. So this means that you're going to do mealy and you want to have minimum number of states using Mealy only. You don't have to worry about seeing whether more might be smaller. But if you have more than the smallest number of states, you will lose points. So this kind of problem, you probably won't lose many points, but you will lose some. Look at. The other thing that you might be asked is implemented a Mealy finite state machine using EDO minimum number of gates. In which case you're going to be using AND gates, OR gates and NOT gates. Or I might ask you to implement that using minimum number of transistors. In which case you're going to be using NAND gates, NOR gates and inverters, because NAND and NOR IS used less transistors then and's and or's. So be cautious off and read problem carefully to make sure that you draw the right answer to this. Normally I will not ask you to draw all of the possible, all of the states and the output, but a mask for most or least significant bit of the next state. And I may ask portals of the output. So be ready for any combination. The problem number two, again, very typical problem that appears on these kinds of exams. In this problem is great illustration for why you need to know the material from exam one. Here, I produce that created the sequential circuit, which also uses a decoder in addition to the gates. So now you will have to remember how the decoder works in order to create an excitation table. Other than this, this is typically I would say, for what may appear maybe slightly on the harder side because of the decoder and all the gates. So here we ask you to create an excitation table. We ask you whether it's merely or more. Remember to figure out if it's merely or more, you have to look at what does output dependence. If output depends on only current state. Current state is what comes out of the flip-flops. Then it's a more out depends on current state and the inputs. Then it's Amelie. In this kind of problem. But I might also ask is to implement say, the most significant bit and, or lead the least significant bits, some combination of the state, next state and the output. And I may ask again to implement the deed or minimal gates or minimum transistors. So all of those are pretty fair game. Question number three, very typical question. I would say this one is on the harder side. Again, I would not expect as complicated for you. What makes it a little harder is that we have a clock dependant seeing these gates both OR gate on top, an OR gate on the bottom. In addition to that, we have a clock going into the flip-flop. Notice that clock going into the flip-flop does not have an inverter, so this is a rising edge flip-flop. Notice that also here we have an latch. So you need to feel very comfortable analyzing this latch and knowing what states the latches in so that you can draw the waveform. And notice that in the waveform type problems, I always provide you with a clock and all of the inputs that you need to generate the rest of the waveform. And oftentimes I will provide you with whatever the current state there's a beginning. If I find that you really need that current state, it's possible that you don't need the current state, in which case you're not going to be provided that. Okay. And so that also is pretty typical. I would say probably for this exam if I gave similar circuit, I will give you less clock cycles to have to draw, or I would make the circuit slightly support. Okay, a follow-up finite-state machine. This is pretty typical example. In this example I have four states and I have two inputs, inputs a and b. Notice that some input combinations are not listed and that in some states, transitions depend on only one input. So in this example, you will have to first create, draw the combinational circuit for to the least significant bit of the next state. So what you will need to do for that is create an excess of excitation table. So that way you know what the transitions are and then implement the least significant bit of the next state, which is Q of t plus one. In this case, it said minimal number of gates. It may have also said minimal number of transistors. If it's Gates, you're gonna do and then, or if it's transistors, you're gonna do NAND and NOR, because NAND and NOR are smaller, It's B, C and D. You can ignore this material with did not cover in this class. Question number five is a great example of a question that will be on Exam three. It will not be on this current exam. So high level state machines will be on the exam that is in week ten. So don't try to solve it right now. Keep that as a great example of something that you can practice on for the next exam. And then question number six, again, it's not going to appear on this exam, but something very similar will appear on exam number three. So don't try to solve it now, I will keep that as another practice questions. For example, number three. Any questions on the sample midterm. And again, this is a great example of a type of midterm that you would've gotten in class if we're wearing person, because we're not in person. What I did is gave you less questions. Same number of points, simpler question spend here. Typically, although some might be similar, like the pattern recognizer I think is very appropriate. And you get almost the same amount of time. So hopefully you will find this less stressful given how crazy the situation is. Right? Gap. Let's see shift register and question one. Here we go. Means that most significant bit is furthest to the right of the flip-flop. Yeah, I think that's a reasonable assumption that most significant bit would be furthest to the right. Can you this state transition table for question four. So I will not do that right now because I want to give people a chance to try this at home. Prior to discussion session tomorrow. In discussion session tomorrow, the TA was instructed to answer any questions related to this exam. And that would be a great time for you to get the answer to this question. For the big thing, the hint that I can give you is that what I will do is I would write out the excitation table for each state. So exemple state 0-0 would have all possible combinations of a and b inputs. So for state 00, you would have a B equal to 00011011. And then for each of those combinations, you may have a transition to a different next state, and you may have a different output values. Now, obviously state 00. If a is 000, the output is going to be 0. So this is a typical more state machine. But notice that database, we'll transition into S1, four inputs being 01. And you may transition to S3 if B is a 0, regardless of what they, yes, that would be an example and you will transition into a stew if both a and B are one. Okay? So it's a little bit of a different way to think about it. It's a great example of what happens when you have two variables. Any other questions or comments on this? Okay, I'm gonna stop sharing that. And I will move back to my sample slides. Just a second. Let me get started. Almost there, sorry, or a slight delay here. Erica, who may find modem sharing and being very confused just the minute. Trying to get it to shared, right bang. There it is. Okay. I think I got the right thing to show. Now what I'll do is I'll step through the problems. Notice that in the previous session that I already solved some of the problems. So I will not solve those in this session. You can watch the other video if you like. So what I would suggest is pick from the questions that are not. So that way you will have solutions for both and you will have also explanation for both. The solution for sample midterm should be posted. If it's not already, let me double check. It is posted, but I would suggest you don't look at the solution. You should solve the problems after you practice sufficiently using the textbook problems and using odd numbered solutions which are at the bottom of the page that has the whole schedule. And then after you have done that, I would actually take the exam, meaning I will take the sample exam and solve all the problems you have time yourself. And then compared to the solutions that have been uploaded, okay, so here's an example ALU problem. In this. It asks you to design it using certain types of components. This actually that come from an old exam. This problem I have solved already, so we'll skip it. Here is another, I would say this type of example is very typical of what you might find on this next exam. Or it's a little bit lighter weight than the first problem. The next one is, looks very complicated and I will probably give you something that's slightly simpler, maybe with only three bits of control instead of four bits. But very appropriate type of question. This is ALU analysis, so we would be asking you what is the operations for each combination of petroleum. But this was a typical latch circuit analysis since I covered that already. And then there was a drawing of the same latch. For this particular drawing. It took a little bit too long. So I probably on exam I would give you something that was about half as many input combinations. But it is a pretty reasonable example of a question. Here is another latch analysis question. Here's another latch. Notice in this latch you have multiplexer and another. So this is a great example of a question for which you would need to remember how these components operate from previous exam, even though we're actually focused primarily on material since exam one. Here's an example of a timing diagram, and I gave you actually the clock and the inputs for the timing diagram. This is probably on the side of a little more complicated, even though it came from actually previous sample exam. And I believe what I did is I took only a few cycles of the plot for this drawing. In the previous exam, I gave about twice as many cycles as what I'm showing here is an example of a very simple question. That's a counter question that asks you, what sequence does this count through? The sequence depend on whatever is told initially in the state. So does the number of counts depend on what is the initial state of the flip-flops. This is an analysis example. Truth. The multiple choice question is primarily for the class. I did not provide multiple choice question. I may have said this circuit is, is this more Mealy circuit than you would've had to write that it's more Mealy. It is a good example up where I might ask you to draw a state diagram given the circuit. And may I ask you to provide an excitation table? Here's another example. Again, the true false multiple choice question is not, was not on the exam, but it likely some form of that might have been with you having to fill in the blank. And this is again an analysis circuit where you would draw the finite state machine diagram and you would provide an excitation table. Same story here. Again, more, more versus merely question. In this particular one, it's an interesting question and I should point out, how would you answer it? Look at the fact that here you need to ask yourself, do I have the output? And if the answer is there is no output, then it is not a Mealy finite state machine. They would basically just be a normal finite state machine. Here is an example of a multiple input problem. This is a Multiple Input Canada. Notice that here, output happens only as a function of the present state. So this is obviously not a Mealy problem. Now notice what I gave it. The problem is actually just the state diagram. And I asked you to provide me with a state table. And then I asked you to try to optimize, I believe, for most significant bit and to provide the output equation. But here I provided both bits just for practice. So we could actually do both implementations. And this is an example where implementation might be minimum transistor implementation, where you do nouns of doors. Here's another finite state machine. Here I provided the finite state machine and ask it to implement it. Again, either minimum number of gates or minimum number of transistors. And you have to fill out the excitation table. This one I already did in the previous class, but notice that it combines others and multiplexers. So you need to know these elements and decoders. Here we saw that it's a Moore finite state machine because output is function of only current state. Remember that current_state is what comes out of the flip-flops, will go into the flip-flops is next state. Here is an analysis problem. This actually, the first time I gave it was a word problem in the exam and it asks students to draw the circuit, that this was actually the final answer of the circuit. The second time I gave it to an exam, I gave the circuit and asked students to draw the finite state machine based on the circuit. Fill out the excitation table. These are word problems, very typical and very likely to appear on the exam. They basically asked you to draw the finite state machine diagram, right? A state table, do the excitation table and then implement either minimum gates or minimum transistors. And I think this is it. So I'm going to give you guys a few minutes to consider what problems you would like me to solve. And I'm going to give priority to the problems obviously that I have not done in the previous class. Please write in the chat that number up the slide that you would like me to put priority on. So here are the slides. I'm gonna step back. Notice 26 goes to 2423. We can skip. 2221 is the same with 20. And then here is 191817. These are all somewhat similar. 15 is the counter. This here is slide 13. Here is 11. Here stand this one I did already, so we'll skip them here. 7543. I didn't do. So. Give it a little bit of a thought. What you would like. And while you are thinking about it, I'll give it a minute for you to consider. So let see what we have to 19s, three-elevenths, and couple of 20. So let's go see what I got. What is login? This exciting latch, That's a good one actually. Let me see too obvious a timing diagram. I already did one, so I'm not going to prioritise that. Let me see what we got in 19. That's a good example, actually, two, twenty two, twenty four. Okay, so here we go. Why don't we start with this here? Because this is something that I believe I did not do last time. So on this particular one, good strategy is to first recognize that I have one input and I have two states. So for these states and input, what I would do is I will do a current state, Q1, Q0 era, and then I will do an input. And then the next state, which would be D one, D 0, and there is no output, right? So I don't have to worry about output. So current state 00, and I have input 01, then current state 01. And again I have input 01, current state 1-0. And the last piece is current state 11. Okay. So if I have 00 here, okay, that's my current state. Notice I want to figure out what are my next state equations. So this guy here, this is my d 0. So my d 0 is equal to the NAND between a and QO. Okay? My d1 comes out of this. This is my d1. And d1 is equal to x or between the, whatever the switches right here. X sorted width Q1. Ok, so my goal in life is going to be first to figure out q 0. These are witches a and Q 0 not. Okay? So if I have a NAND gate, and let me just focus on these two inputs. If I have a NAND gate, NAND gate, how does it work? So if I have a and Q 0011011, and I want the output. If it wasn't the end, I will have a bunch of zeros and then a one. But now I have a bunch of 1's and 0's as long as one of the inputs is a 0, I'm going to have output tuple one. So I can basically just fill this out right here immediately, because I know that every time a is a 0, output is going to be one. The next thing I know is every time Q 0 is a 0, so Q is 0 and the top one. And write here, right? And then Q0 is a 0 over here also. Okay? And that basically does everything but these two, for these two D 0 is a 0, okay? Everybody, okay, so far. And then the next thing I have is an XOR. So, and in that case, I'm going to be looking at this column and this column to figure out my XOR. Xor is going to give me a one if the two are different. So the two are going to be definitely different here. In the first one, they're different in the second one there or not. And then here they are not different. And then in the bottom one, the first one, they are not their friend. In the second one they are different. And so this is how I filled out my D1 and D0 Zara site. So hopefully this is good. The next step here is going to be to draw the finite state machine. So let start with my 00 state. So here's my 00 state. And notice that I go to 11 state pretty much regardless of what the input this. So I, that's super easy. The next state is 01 state. So here's my 01 state. And if a is equal to a 0, I go to 11. If a is equal to a one, I go to 0-0. Okay? So that would be this and this. The next one is 10 state. So here's my 1-0 state. And if a is a 0 or B is a 0, if a is a 01, I always go to the same state, which is 01. So I just draw a line here. And then the last one is a 11 state. And here it matters if a is equal to one, sorry, if a is equal to 0, I go to 01 state. So if a is equal to 0, I go to 01. And if a is equal to one, I go to 1-0 right there. Okay? Now, and it finishes this question. Any further questions on this? Ok. Let me walk back. I see number of people asked about number 24. So this is also an analysis question. A question there. So the question is o, the problem would not say just analyze this. I brought analyze this circuit because I wanted to have space to write. The problem would probably say Part a, I fill out the excitation table and Part B, draw the state diagram. And depending on, you know, what is the state diagram like, there might be Part C in which I say, what is the circuit actually do? So for example, in that case, I might ask you to recognize and to tell me that it recognizes a particular sequence or that it counts, you know, through particular sequence of states. In this example, there is nothing obvious that comes to mind. So I would not necessarily ask for that. Now a question of going over the state diagram slower and what I'm gonna do instead is I'm going to go into the other example, that number of people asked and I will walk you through the first couple of parts of that and we'll do it a little slower way. Would it be okay to say that a or a not for the transition always moves? You can certainly see that it's not necessary. Okay, so moving on to, I think it was a problem 2424, every go. What does this circa due? So this again would not be the question that I'll put an exam question that output than the exam would be. Fill out the excitation table. Notice that this thing has an output and output this function of current state only from what I can see so far, yes. So this is a Moore output, okay? And does it have an input? Interestingly enough, I actually don't see an input. Does anybody see an input? Clock is not an input. Clock. Just tells us that these are flip-flops and whoever drew this miss the triangle. So really this is no input and one output. So this would be a, probably a pretty typical counter design in a likely counter with sequence recognition. Why do I say that? Because I'm noticing that this thing UPS three bits. This thing just has a state through a set of states through which it cycles. But it does not seem to have an input. So this will be pretty typical of counters that accounting through a sequence of states. Notice that it does have an output. So this output would be whatever pattern we're trying to recognize in the camera. So the way I do this is pretty simple. You just start with all possible states. So 00000101001110101110111. And now we just plug those numbers in. So let me start with all zeros here as 000. And now I'm going to look at what goes into my equations here. So my d o, I should probably label them. Here is my 012. Just for simplicity case. And y has a Moore state machine is an and so y is equal to what? It's equal to. And I believe all current states, if I see that right. Yeah. So it's D two, D one, D 0. Okay. So why I can immediately, Sorry, it's not these excuse. That's the current state, q, Q1, Q2 in q 0 anded together. So basically, if I add all of these together, the only sequence that y is going to recognize, so it'll be 14, is when all of them or all of the current states are one, the rest of the time y is going to be a 0. So what you can say is this is a counter that recognizes when it gets to count of seven. And likely why you would want that this, what you may want to do is plug that then into a reset signal and tried to reset when it counts up to seven. But that's not what we show here. So your answer to what does this do should be this thing counts and recognizes when the count reaches seven, meeting one-on-one stored at the bits. Now the next step should be I should look at how to get my d 0. So my d 0 is an OR gate in its, or of what this is going to be or of q prime, q 0 prime, or width. But what is this other guy? This guy is Q2 prime, okay? So Q0 and Q2 prime. So really I'm just looking at these two columns and I'm asking myself, why does either of those is 0? Because then the output is going to be a one. So q2 is a Zara for all of these. So that means that the output is going to be a one here. And then q one is a 0 in addition for these two, so output is going to be a one here, rest of the times it's a 0. Ok? So that actually means I'm done with these Era. Is everybody OK on that? Okay, I'm gonna do next. D1 and d1 is an or between whatever the heck, this IS much we need to figure out. And this AND gate, so this AND gate is, has two inputs. The first input is acute Zara, so Q0 and ended with width. Let me see what the next one is. This is Q1 prime. So Q1 prime. Okay? So that's the AND gate and this is ord with whatever the second AND gate, this, this AND gate is Q2 ANDed with what is the second line? The second line goes here, Q1 prime, so Q2 and Q1 prime. So here's my Q2, Q1 prime, ok? Otherwise known as Q1 prime, and ads with q 0 or Q2. So this thing will be a logic 0 if either q 0 and Q2 are 0. So q 0 and Q2 are 0 here. And here. And I think that's it. The other possibility is it's going to be a 0 and q one is a one. So if Q1 is a one, this thing will be a 0. So it's 0 over here. The rest of the time. It's a logic one. Notice how I'm simplifying things for myself. I'm simplifying it by leveraging the fact that I now and gate will give a 0 if either of the two terms is a 0. Okay? And the last piece is the ugliest, that's this d2. And d2 is gonna be and, or between Q2, Q1 prime, that's the first AND gate. The second AND gate is going to be Q one anded with whatever the other input, this, which is Q2 prime by c, That's right. Yeah. And then the last AND gate, which is this one. So this is or Q1, Q2 prime. And the last, oops, sorry, at this prime didn't quite turn out so nicely. And the last AND gate is my Cuz 0 anded with HA, Q0 prime. If I see this right, Q0 prime, which basically is a 0. So I think somebody drew this incorrectly. But let's leave it as S. So that means that things have just gotten simpler. This is q two q one prime ord with Q1, Q2 prime, which is basically an XOR Q2 exhort with Q1. So I'm looking, I'm going to get d two equal to a one if Q2 and Q1 are different from each other. So here they are the same, here there are different, different, different, same, same. Okay. The third endgame be Q1. Okay, let me see the third AND gate again. Maybe the throne. So the third AND gate is this one. This is or your write Q1. Okay, so remind just, And I was hoping for some beautiful simplification. I don't get it. Okay, Q1 or ended with Q0 prime, right? Yeah, okay, so now we're okay. But that does not change and they still have cute to exhort with Q1 ord with Q1, Q0 prime. So the first thing that I'm going to do here is deal with my AX4. If, because if XOR is a logic one, then the output is going to be a logic one. The next pieces this, so output will be a logic one for q one equal to one and Q 0 equal to 0. So if I have 10, then its a logical and otherwise it's a logic 0. Ok? So everybody find so far, I'm going to rewrite my d 0 equal to Q0 prime ord with Q2 prime. So that way I have a little bit of space down here. I can get you started with a state diagram. So notice first that, that don't necessarily go through all of the states. If I say, oh, maybe I do. Okay, so here I have 000 state and 00 state is going to go to 001 state, which is 001 state. So now I'm down here, will go to 011 state. Okay? Then we have 011 state, which goes to 101 state. So here is 101 state. Then I go to 101 state and that goes to 110 state. So here's 110 state. Then I'd been one non-zero state and that goes back to 11101 state. So I'm done with those done with this. Done width is done with this so far, okay? And outputs a 0 and all of those. So here 0, here, 0, here is 0, whoops, sorry. And here is 0, okay? Then I have 100 state. So here's 1-0-0 state, and the output is a 0. But that state, so I'm in this row, that's, that goes to 111. So here is my 111111 state. The output is a one. So I'm done with this. And now I'm in 111 state that goes to 000 with an output one. And then the last piece that I have is the 010 state. So here is 010 state. 010 state goes to 101. So that's gonna go in here and output is 0. Okay? So this is kind of an ugly counter. And notice that this counter doesn't exactly make it through all of the sequences necessarily. Depending on what you started on, it may actually make it to one-on-one, but once it makes it to 111, that never get back there again. So this allows you to recognize that you've gotten there once. Okay? The instructions on the exam will basically tell you that you should be filling out an excitation table and Part a and Part B, it should tell you to draw the state diagram. And on Part C it would ask you, what does this do? And your answer should be that it's a counter that counts through as many as seven states and that it recognizes a sequence 111. So that would be how would probably weren't that? Okay. Any other questions about this problem? Before I kind of scroll up and look at other questions that have had. Ok, so this is the problem number 24. I see somebody asked about 28. That was the finite state machine. So let me do that. Problem 28. We haven't that quirk. That basically wants to produce an output of one whenever input pattern is 1-0, R11. And so in this particular example, what we will do is we would start from summing it state. And then we would be thinking about, did I get pattern, input pattern of 0. So if the input x is a 0, I go to a state where I have a 0. If input taxes of one, I go to a state where I have a one recognized. The next possibility if I'm in the state 0 is a pattern of 0. Or I can get a one which would bring me to a state where I have 10. So in this state, I would want to provide an output TOPO one because that's the state that I'm trying to recognize. Okay. If I have a 0, I probably just want to stay in the current state because that way at least of recognized 1-0. Now let's go back to my state where I have a one. If I get another one now, I get the state of 11 and the output is going to be a one. And notice in this state, if I keep getting one, some still in the pattern of 11. So that makes me happy. If I get a 0. And now I'm going to go into a state where I have a 01, essentially, which I'm not interested in. So if I get a 0, I want to go back to, I have a single 0 kind of situation. And let me see if I'm on this state one and I get a 0 after that, then I want to go to a state where I've recognized at least one reading Zara. So I think at this point I have covered all of the outgoing edges on the left side of my diagram. On the right side of the diagram, I covered all the edges from a 0 state, from state that's 1-0. I would want to think about what happens if I get a one. So if I get a logic one, that means that I'm going to have to logic once. And that means I'm now in state where I recognized to logic once. If I get a 0, I end up with something that looks like this, which means I have a 01, which doesn't really help me. So it allows me to just recognize that I have a 0 up. Okay. Okay. Let me scroll down because I think I got some questions. What does the first type state say? It says in it just the starting state. It allows me to gets get started with my pattern recognition. Ok. All right, so the other thing that I might ask you, this basically means just two sequential inputs. First you get one bed, then you get the second bit, then you're looking at the last two bits. Okay? So the next thing that I might ask you is to actually implement this using finite state machines. So in this case, what you want to do is you would want to first do the state assignment. So let's say that in this case I assign an ID stage 001 state, while I'm going to need three bits because I have five states. So one state there's going to be 0 or one. The 0 state might be 01011 state might be 11110 state might be 1-0-0. So this would be an example of how I might actually do it. Or actually to make it a little easier, let me 010 and I'll do the other 1001. Ok. So now what I would want to do is an X-Ray excitation table. And here I'm going to have the current state. So this is going to be Q2, Q1, Q0 out and an input. And then I want next state, which is d two, d one the Zara, and an output y. Okay? So now what I will do next is I will simply have to put all of the combinations in. But for example, I might ask you, in what state is the output equal to? One is the equation for the output 0. So if output 0, sorry, what is the equation for the output Y? Output y is going to be one in two states in this and this state. So we can see that output y basically. Well b, a one, if the current state is either 100 or 110, this means that y will be equal to whatever the most significant bit of current status, which is Q2 and deadweight q 0 prime. So I can read that out directly out of my finite state machine. Because I know that the outputs in all other states are 0 because I have not recognized my sequence. Okay? So that part, I don't even have to draw. For the rest of it. What I might do is instead of filling out a big, huge table, what I might do is actually draw myself, I came up, start filling out in the came up immediately. The next state, for example, if it stayed d2 that I'm interested in implementing. So here's my Q2, Q1, Q0, and then input x. And here we go, 000110110 and then 00011110. Okay, so let's look at how I might do something like this. So if I'm in state 000, which is right here, and I have an input of 0, which is right here. I guess I should use a different color, so it doesn't overlay. So let me pick maybe a green. So if I'm with an input 0 and a state is 0, so that's going to be this box right here. What will happen is my next state. There's going to be zeros 01. So that means that the d2 is still a euro. This is my next state bit. Okay? Now if my input is a one, my next state is going to be again, most significant bit is a 0 sum still, okay, here. Then I have the current state, style is 001. So that would be this state. So now I'm in this column. So my current state is 001, which is over here, and the input is a one. So on the input one I go to this state, which means that my most significant bit would be a one. Missing is the time in my chat, a T-s time? Yes. If so the sequence 10 will one have to come before 0? Oh yeah, that's true. So I think what I drew something like this. Okay. So hopefully now it's correct that getting back to my states is everybody's the following. Y is y equal to q to q 0 prime? Well, I look at the output, isn't one, output is one in these two states. That this state is represented as, oh, you got a point. That state is represented as 111, the other state is 110. So the output is actually just Q2. It would be Q two, Q one prime, q 0 prime, or duit, Q1, Q0 era. Now it's better, okay? Because we have to actually consider all possible state combinations. Okay? So now let me move on. Move back to my column for D2. Now I have a situation when Q2, Q1 or 0-0. So the state is 001 and the input x is a 0. So they've stated zeros here, a one, I'm still in this state, but the input is a 0, which means I go to the same state, which means I put the 0 here. Okay? Now notice that there are some states. So here's 00001 here as zeros 01, again, 01 here, 01001, here is 011. And I think this is the state that they don't have, so I will have bunch of don't cares here. Okay? Because I never took this input combination, right? I also have here 1-0-0. Again, I will go through and that would fill out the rest of this map. But notice that some other states also are not represented. So I have 1-0-0, but I do not have a state. I'm going to erase this. Why? So let me write y here, Q2 and Q1 prime, q 0 prime ored with q one q 0. I'm gonna erase this. So I have a little more space. There we go. Notice that the other state that I don't have is 1-0 one I believe. Right. So here I would have don't care. So as well. But I do have one 1-0, I think. No, I don't. So that would be also don't cares. And I do have 111. So here I would have different new states come again. So pretty much regardless of what x is 4101 state than 1-1-0. The next states are going to be don't cares and output there's going to be a don't care. Okay? So I have 123 of those states because I have total of five states. Ok. Any questions on this? I'm going to stop here because I think it's going to take me quite a long time to fill out the rest of this and I want to make sure I get to some of the earlier questions as well. But this is a good example of how you would go through and fill out the table. So once you're done filling out this table, I will probably ask you to just fill out one of these K maps and then do the minimization. And for minimization, you would love to combine zeros or ones and provide the final equation. Any other questions on this problem? How did I decide what to assign to each state? That's the kind of thing that that would give you actually in the problem. So I would say, you know, assigned in increasing binary order and then I would grade using that strategy. So I will take whatever assignment you duck, and we would grade it accordingly. This is why oftentimes these kinds of problems I split up into parts. And oftentimes I will have you draw the state diagram, or I would have you fill out partially drawn state diagram. So one example might be where I actually draw the diagram, but I don't put all of the components. So I might draw something like this. 010 input only one transition and ask you to fill out the rest. So that would be another strategy. Okay. Any other questions related to this? Okay, we don't like to do now is return to earlier questions. Just question. How does epicenter detect 1-0? Wow, it the text said because it first gets a 0, then it gets a one, and that would detect this 1-0. So that was the thought. This is why I change this from minus to plus because one would come after a 0. Okay. Let me go back to earlier questions that you guys asked me about. I c five and then I see also in love and being listed. So let me see what slide five is versus what's likely to love on this. So 11 is, oops, where did they go? 11, latch five is a now to you. Let me see the time. So we got 20 minutes. What do you guys prefer, five or 11. Can we get a boat on this? Let me actually do this. A, five, b, 11. And I'm gonna start a poll and give you a few seconds to vote. So Slide five is ALU, Slide 11 is a funny-looking will latch design. So let me see what you guys like. Okay, give you a 543210. And most people want me to start put 11. So I'm going to love it. Here we go. Let me move on. 11. Let me just find that just the src than 11. Okay, let's do it. So this kind of slide to the, sorry, the mean to go to the next one. On this kind of example, what I want to do is first try to figure out what are my C and D inputs. Because I recognize that this thing is an SR latch. So here, what my c is, it depends on whatever to carry out this over here. And my d is going to depend on the sum between a and B. So let me kind of extend this. And I'm going to say this is my sum and this is my C out. Okay? So if I'm adding a plus b, What I'm gonna get is 00 here, 01 here, 01 here, and then 1-0 here. Is everybody OK with the other part of this. Ok, the next part, this the carry out over here. So carry out is going to be a 0 for all cases except for this last case, when a and B are both one. So my c is going to be, in first three cases it will be equal to a. So for these first three cases, C is going to be equal to a, which means it's 001. For the last case carry out is u1 and C is going to be equal to whatever B is. But B here is a one. So c as 0011. Now let's see what D is. D is equal to a sum. So I'm just going to rewrite the 0110. Okay? So far, so good. So if I have an SR latch and I have stayed 00, that state is my hold state. If I have 11, that's invalid. Right? Now. Let's, if I half state, which is now the question is actually, it would be better. Here is my q bar and here is my queue. Okay, now the question is, is C a set or a see a reset? So let's see what happens if I have d equal to a logic one. So I'm going to look at this case. Here is u1 and here is a 0. If this logic one, the output of D is a 0, which means that Q is being reset. Okay? The next one, where D is a logic 0 and C is a one, we have a set state, which means that Q is a one. So c would effectively be my set. D would be my reset. On the whole, I would say q minus an invalid. I would say don't care. Okay, are we okay with this current design? And we can actually discuss what this is. This is essentially an SR latch, large, but with slightly different inputs. Right? How do we know that 1-0 causes invalid again? So in this case, we know it causes invalid because inputs S and R are 11. And we know that this NOR gate is an SR latch. This is why I know that this is invalid, but you can also analyze it. If both c and d are one, you end up in a situation where Q and Q bar are 0, which is invalid state, okay? It's showing the input other than the and bottom nor get starts as a 0. We don't have to assume anything it just analyze it. In this case. Any other questions before I move back to question five? Is recent always parallel with Q? That depends on how you have designed your latch and the N4 N4 SR latch. Yes, that is true. But it may not be true. So if it's near the end, you should check. Okay, let me go back to slide five. Because a bunch of people asking about this one, and I'm going to get started just a second. Something that has fallen here. Let's get started thinking about how we would do this. So in this particular example, notice that we have equality to do this is a comparison rehab strictly less than this is that you will need the now therefore. And here you have addition, and here you have subtraction. So you're definitely going to need another, right? So that would be my first thing that I withdraw, withdraw myself and another, and I would think about, you know, how can I actually control this adder? So here's one input, here is the other. Here is my carry in, here's my carry out, and here's my sum. Okay? Design. What I can do is I can actually use one or two different to others. How many others are use kind of depends on me. It depend, it depends on what they might have said in the particular problem is the way that this problem should be designed. So here, for example, because I have a strictly less than, I have to situations in which I would want to subtract a from b. Here is one situation and here is another situation where I want to do subtraction. Now in this first and what I'm interested in is really just what comes out as the MSB of some. Because the most significant bit of the sum will tell me whether the a was less than b. If MSB of sum is equal to one, then a was in fact less than b. So that's equal to true. Okay? For an a bitwise equality, I can use my XNOR gate. So for that, I can just simply say here is my XNOR gate and output, for example, the 0th order bits in here. And produce the a equal to B output right over here. So for that I just need a single gate, then I can forget about using another. Okay? So the next thing I'm gonna do is I'm going to figure out how do I use my either. So the first thing I need to realize is that in all cases, I want to put a in as one of the inputs. That is the most significant bit. The other thing is I need to realize that in some cases I'm going to want to be, and in some cases I will want B prime. So i will want B prime in these two cases. So these are my B prime cases. And I won't be in this particular case. So notice that here, how I control that depends on what S one and S 0 r. So if I have L 0 equal to a one, then I want to be prime. So here is my Ezra. If my S 0 is equal to a 0, then I want to be to go in. Okay? So this so far should get me either a plus B if a 0 is a 0, or it will get me a minus or a minus b plus a 0, sorry, a minus B minus one. So if Carrie n here is 0, then I will end up with a minus b minus one. So I would want, in one case carry in to be a 0. In the other case I want it to be a one. I wanted to be a 0 for this part. I would want it to be one for this particular part, right? So I would want it to be one when S 0, S1 is a 0. And I would want it to be a 0 when S one is a one. A better way to do this is to get rid of the multiplexer and to simply use S1 as a not gate. So here is my S1. If S one is a 0, I end up with carry in of one, which will give me my normal subtraction. Riches what they want right up here. If S one is a 0, that is, if S one is a one, then I want the carry in to be a 0. Which would be this last case over here. Okay? So now the only piece that they need to figure out is, so here's my lowest order bit slice, a 0, b 0, and here's my sum and carry out of 0. So now I simply need to figure out if I'm going to output the comparison or I'm going to output whatever is out of my. Other than in this case, I can distinguish that by just looking at when do I need bitwise equality versus when do I need all of the other possibilities? And you can see that the output is going to be bitwise equality only if both S1 and as 0-0. Otherwise, the output is going to be one. And sorry, it's going to come out of the other. So let me put this in here. So if I have a 0 here, output will be the adder, which means I want to control this as S1 ord with a 0. So fs one ord with a 0 is a 0. Output is whatever my majority XNOR gate gives. Otherwise output there's going to be whatever comes out of the adder. Ok. Any questions on this? So far? So this is an example in which I needed two multiplexers, one inverter and one XNOR gate. Now notice that when I have a most significant bit, what I will need is the sum output will actually act as the comparison. Okay? So on the most significant bit, let's imagine that this is by ALU, and here is the sum coming out. And thats of n bits. What I wanna do is I want to separate out N minus one and my most significant bit over here. So sorry, this should be 0. This will be n minus one bits, and this would be the most significant bit which is labeled N minus one. Okay? So that's how I would want to draw that. Okay, let's see. Does S1 prime input mess up the addition case? So here is this case, S1 and S 0, our bow or 1-0. So S1 is a one. This means that the carrion would be a 0. So no, I don't think it would mess it up at all. I think that's OK. Then I have the other question. How are we getting minus one for when S1 is a one? So the question is, I believe for the combination one-to-one, is that right? This combination here. So this combination is basically subtraction. So this is a minus b minus one. But notice to get a minus B, you need Two's Complement and 2's complement is. So for this 24 a minus b to work, you need be in two's complement. For 2s compliment you need B to B prime, then you need to add one. I don't add this one. So if I just add 0, then I end up with a minus b minus one. Ok? So I'm going to be, in this last case when S one is a one, I want to be carrying in a 0. And that will ensure that I get a minus B minus one. Got oh, you know what? That might be the case. So let me see. Somebody was asking, aren't doing a plus B and not a plus b plus one. I think you're right. So I think what I did here is just a plus b. We would need to change it to do a plus b plus one, in which case there needs to be a carrier of one for the case when S1 is one and S 0 is 0. So that means that I would need to change this and may need that additional multiplexer. So for right now, let's imagine that this solution, because I'm about out of time, is just for a plus B instead of a plus b plus one. Now if I was doing a plus B plus one, what I would do would simply change the control. So how would I change the control? Would erase this thing. And let's look overdose again. Okay, let me erase this stuff. So let's see here on this first one I want carry enough one. On the second one, I won't carrying the one on the third one, I won't carry enough 0. Ok? So the only time I won't carrying of zeros if both S1 and S 0, R1, all other cases I would want carry in of one. So what I want to say is when both S 10 are one, I want carry in the 0. So that's basically like a NAND gate. All right. So here is my NAND gate, S1 as 0 and carrion. Does that look good? I can also use an XOR but NAND gate transistors. So I like that. Okay? And yes, you could have implemented this piece as a plus b prime as well. That just would've changed my arrangement. The multiplexers. That is correct. So this is the same thing as a plus b prime. Any other questions about this? Okay. Since I have two minutes left, Did you guys want me to get started on another problem or do you want me to answer any further questions? Well, something of this difficult to be on the exam. This is actually pretty comparable to what might be on exam. Normally, I would expect ALU designed to have only four different operations. For this level of exam? Normally for ALU design, I I wouldn't ask you for the minimum number of gates, which makes it a little more flexible in a little easier. If I ask for minimum number of gates, I might give something that's a little simpler in terms of operations. But yeah, this is a pretty represent the tip example. Let me see if there's any other. So this one I think is a little more difficult than what I put on this exam because it has both more combinations and it also puts a limitation on what you can get for the for the implementation. I think, yeah, let me see others. This one I think is also a little bit more complicated analysis part is not that hard. I think I would probably put an exam would have one less control bit. So instead of f 0 answer at three, I will put something that's at 0 to F2. Because from now let's, it's, I think it's not that hard to walk through it. Bce latch, this is fair game. I think this kind of a latch will definitely be on the exam timing diagram. This is more complicated than I would expect. Exam. This is pretty representative, would definitely expect that. This is also representative as is this. This is very representative as well. This also what I would say for this problem, I would probably just ask most significant bit and the output implementation. Finite state machines, all of them are very representative. Getting answers to all these questions. So I can certainly pause the answer's. What I'll do is I'll immediately post the notes from the class. It will take me some time to create solutions. Don't expect those in the immediately. What I'll post right now is the one I did solve in both of the classes. I would expect I'll try to post solutions by tomorrow. Okay. Any other questions or concerns? Anything? They they're covered in this class today or anything else? Ok. Well, I wish you all good luck. And let me know if you have any further questions. And I hope this exam turns out amazingly well for everybody. Exam scores will be re updated for the small subset of people for whom one of the questions was re scored. So I will wait for that until tomorrow. We did update the actual score. I realized last night that the score in Canvas was not curved for those that had the update its course, so we need to fix that. So hopefully by tomorrow you should see the updated score. Basically everybody will have either exactly the same score you had prior to this change or slightly higher. Ok, thanks everybody. Bye.